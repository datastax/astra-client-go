openapi: "3.0.0"
info:
  description: >-
    Use these REST APIs to perform lifecycle actions for DataStax Astra databases and DataStax Astra Streaming Pulsar instances.</br>
  version: 2.2.0
  title: Astra DevOps API
  contact:
    email: ad-astra@datastax.com

security:
  - Bearer:
      - org-db-create
      - org-db-terminate
      - org-db-view
      - org-db-expand
      - org-db-suspend
      - db-keyspace-create
      - db-cql
      - accesslist-write
      - accesslist-read

tags:
  - name: Database Operations
    description: The Astra DB DevOps APIs are for interacting with Astra databases and all aspects of their lifecycle.
  - name: Streaming Operations
    description:
      The Astra Streaming DevOps APIs are for interacting with Astra Streaming instances and all aspects of their lifecycle.<br/><br/>
      <strong>Note:</strong> Working with Streaming DevOps API requires auth token with permission to `Manage Streaming`.<br/><br/>

  - name: Roles
    description: The DevOps Roles APIs are for interacting with roles within your Astra organization
  - name: Users
    description: The DevOps Users APIs are for interacting with users within your Astra organization
  - name: Token
    description: The DevOps Token APIs allow creation and deletion of client secrets
#  - name: Authentication
#    description: auth endpoint for service account authentication to get token used for all other database operations via the api

paths:
  /v2/databases:
    get:
      tags:
        - Database Operations
      summary: Returns a list of databases
      description: Get a list of databases visible to the user.
      security:
        - Bearer: [org-db-view]
      operationId: listDatabases
      parameters:
        - in: query
          name: include
          description: Allows filtering so that databases in listed states are returned.
          required: false
          schema:
            type: string
            enum:
              [
                nonterminated,
                all,
                active,
                pending,
                preparing,
                prepared,
                initializing,
                parked,
                parking,
                unparking,
                terminating,
                terminated,
                resizing,
                error,
                maintenance,
                hibernating,
                hibernated,
                resuming,
              ]
            default: nonterminated
        - in: query
          name: provider
          description: Allows filtering so that databases from a given provider are returned.
          required: false
          schema:
            type: string
            enum: [ALL, GCP, AWS, AZURE]
            default: ALL
        - in: query
          name: starting_after
          schema:
            type: string
          required: false
          description: Optional parameter for pagination purposes. Used as this value for starting retrieving a specific page of results.
        - in: query
          name: limit
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          required: false
          description: Optional parameter for pagination purposes. Specify the number of items for one page of data.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Database"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "5XX":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Database Operations
      summary: Create a new database
      description: Takes a user provided databaseInfo and returns the uuid for a new database.
      security:
        - Bearer: [org-db-create]
      operationId: createDatabase
      requestBody:
        description: Definition of new database.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseInfoCreate"
      responses:
        "201":
          description: created
          headers:
            Location:
              schema:
                type: string
                description: Database UUID
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/databases/{databaseId}:
    get:
      tags:
        - Database Operations
      summary: Finds database by ID
      description: Returns specified database.
      security:
        - Bearer: [org-db-view]
      operationId: getDatabase
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/databases/{databaseId}/keyspaces/{keyspaceName}:
    post:
      tags:
        - Database Operations
      summary: Adds keyspace into database
      description: Adds the specified keyspace to the database.
      security:
        - Bearer: [db-keyspace-create]
      operationId: addKeyspace
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
        - $ref: "#/components/parameters/KeyspaceNameParam"
      responses:
        "201":
          description: created
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/databases/{databaseId}/secureBundleURL:
    post:
      summary: Obtain zip for connecting to the database
      description:
        "Returns a temporary URL to download a zip file with certificates for connecting to the database. The URL expires after five minutes.<p>There are two types of the secure bundle URL:
        <ul><li><b>Internal</b> - Use with VPC peering connections to use private networking and avoid public internet for communication.</li>
        <li><b>External</b> - Use with any connection where the public internet is sufficient for communication between the application and the Astra database with MTLS.</li></ul>
        Both types support MTLS for communication via the driver.</p>"
      security:
        - Bearer: [db-cql]
      operationId: generateSecureBundleURL
      tags:
        - Database Operations
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      responses:
        "200":
          description: Credentials provides a link to download cluster secure-connect-*.zip file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredsURL"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/databases/{databaseId}/terminate:
    post:
      summary: Terminates a database
      description: Terminates a database.
      security:
        - Bearer: [org-db-terminate]
      operationId: terminateDatabase
      tags:
        - Database Operations
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
        - in: query
          name: preparedStateOnly
          description: For internal use only. Used to safely terminate prepared databases.
          required: false
          schema:
            type: boolean
            default: false

      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/databases/{databaseId}/park:
    post:
      summary: Parks a database
      description: Parks a database.
      security:
        - Bearer: [org-db-suspend]
      operationId: parkDatabase
      tags:
        - Database Operations
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/databases/{databaseId}/unpark:
    post:
      summary: Unparks a database
      description: Unparks a database.
      security:
        - Bearer: [org-db-suspend]
      operationId: unparkDatabase
      tags:
        - Database Operations
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/databases/{databaseId}/resize:
    post:
      summary: Resizes a database
      description: Resizes a database. Total number of capacity units desired should be specified. Reducing a size of a database is not supported at this time.
      security:
        - Bearer: [org-db-expand]
      operationId: resizeDatabase
      tags:
        - Database Operations
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      requestBody:
        description: Map containing capacityUnits key with a value greater than the current number of capacity units. The max increment of 3 additional capacity units can be added at one time.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CapacityUnits"
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/databases/{databaseId}/resetPassword:
    post:
      summary: Resets Password
      description: Sets a database password to the one specified in POST body.
      security:
        - Bearer: [org-db-create]
      operationId: resetPassword
      tags:
        - Database Operations
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      requestBody:
        description: Map containing username and password. The specified password will be updated for the specified database user.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPassword"
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/availableRegions:
    get:
      tags:
        - Database Operations
      summary: Returns supported regions and availability for a given user and organization
      description: Returns all supported tier, cloud, region, count, and capacitity combinations.
      security:
        - Bearer: [org-db-create]
      operationId: listAvailableRegions
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AvailableRegionCombination"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /v2/organizations/roles:
    get:
      tags:
        - Roles
      summary: "Get all roles for an organization"
      operationId: "getOrganizationRoles"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Roles"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Roles
      summary: "Create a role in an organization"
      operationId: "addOrganizationRole"
      requestBody:
        description: "The model for create role body."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleRequest"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/organizations/roles/{roleID}:
    get:
      tags:
        - Roles
      summary: "Get a role for an organization"
      description: "Retrieve the details for a role for a given organization."
      operationId: "getOrganizationRole"
      parameters:
        - $ref: "#/components/parameters/RoleIdParam"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Role"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Roles
      summary: "Update a role within an organization"
      description: "Update a role within an organization."
      operationId: "updateRole"
      parameters:
        - $ref: "#/components/parameters/RoleIdParam"
      requestBody:
        description: "The model for update role body"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Role"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Roles
      summary: "Delete a role by ID"
      operationId: "deleteOrganizationRole"
      parameters:
        - $ref: "#/components/parameters/RoleIdParam"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/organizations/users:
    put:
      tags:
        - Users
      summary: "Invite a user to an organization"
      description: "Invite a user to an organization or resend an invitation with new invitation details, such as an updated expiration"
      operationId: "inviteUserToOrganization"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInvite"
      responses:
        "200":
          description: successful operation
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    get:
      tags:
        - Users
      summary: "Get an organization's users"
      operationId: "getOrganizationUsers"
      responses:
        "200":
          description: List of users for the current org
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrgUsersResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/organizations/users/{userID}:
    get:
      tags:
        - Users
      summary: "Get an organization's user"
      operationId: "getOrganizationUser"
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Users
      summary: "Remove or uninvite a user from an organization"
      operationId: "removeUserFromOrganization"
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/organizations/users/{userID}/roles:
    put:
      tags:
        - Roles
      summary: "Update organization roles for a user"
      operationId: "UpdateRolesForUserInOrganization"
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInviteRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/access-lists:
    get:
      tags:
        - "Access List"
      summary: "Get all access lists for an organization"
      security:
        - Bearer: [accesslist-read]
      operationId: "GetAllAccessListsForOrganization"
      responses:
        "200":
          description: Access lists for an organization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccessListResponse"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /v2/databases/{databaseId}/access-list:
    get:
      tags:
        - "Access List"
      summary: "Get access list for a database"
      security:
        - Bearer: [accesslist-read]
      operationId: "GetAccessListForDatabase"
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      responses:
        "200":
          description: Access list for a database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - "Access List"
      summary: "Replace access list for your database"
      security:
        - Bearer: [accesslist-write]
      operationId: "UpsertAccessListForDatabase"
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessListRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - "Access List"
      summary: "Add addresses to access list for a database"
      security:
        - Bearer: [accesslist-write]
      operationId: "AddAddressesToAccessListForDatabase"
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AddressRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - "Access List"
      summary: "Update existing fields in access list for database"
      security:
        - Bearer: [accesslist-write]
      operationId: "UpdateAccessListForDatabase"
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessListRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - "Access List"
      summary: "Delete addresses or access list for database"
      description: >-
        If the addresses query parameter is not present, it will delete the entire access list.
        If the addresses query parameter is present, it will delete only the given addresses
        from the access list.
      security:
        - Bearer: [accesslist-write]
      operationId: "DeleteAddressesOrAccessListForDatabase"
      parameters:
        - $ref: "#/components/parameters/DatabaseIdParam"
        - $ref: "#/components/parameters/AddressesQueryParam"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/access-list/template:
    get:
      tags:
        - "Access List"
      summary: "Get access list template"
      operationId: "GetAccessListTemplate"
      responses:
        "200":
          description: Access lists for an organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessListRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/access-list/validate:
    post:
      tags:
        - "Access List"
      summary: "Validate structure of an access list"
      operationId: "ValidateAccessList"
      responses:
        "200":
          description: Access lists for an organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/clientIdSecrets:
    get:
      tags:
        - Token
      summary: "Get a list of clients for an org"
      operationId: "getClientsForOrg"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ClientRoleList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - Token
      summary: "Generate token for client"
      operationId: "generateTokenForClient"
      requestBody:
        description: "The model for generating token for client."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateTokenBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/GenerateTokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/clientIdSecret/{clientId}:
    delete:
      tags:
        - Token
      summary: "Revokes a token"
      operationId: "deleteTokenForClient"
      parameters:
        - $ref: "#/components/parameters/ClientIdParam"
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"

  /v2/currentOrg:
    get:
      tags:
        - Token
      summary: "Get the current organization from the passed token"
      description: "Retrieve the details for the organization in the provided token."
      operationId: "getCurrentOrganization"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  ## Start Astra Streaming paths...
  /admin/v2/stats/namespaces/{tenant}:
    get:
      summary: "Get namespace status for tenant"
      description: "Get the namespace status under the specified tenant"
      operationId: idNamespaceStatsTenant
      parameters:
        - name: tenant
          in: path
          description: tenant
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            map of tenant's namespace stats, key is the tenant namespace name,
            the value is the stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statsResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: over rate limit
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - namespace-stats-under-tenant
  /admin/v2/stats/namespaces/{tenant}/{namespace}:
    get:
      summary: "Get aggregated stats for namespace"
      description: "Get aggregated stats under the specified tenant and namespace"
      operationId: idNamespaceStatsTenantNamespace
      parameters:
        - name: tenant
          in: path
          description: tenant
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: namespace
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            map of tenant's namespace stats, key is the tenant namespace name,
            the value is the stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statsResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: over rate limit
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - namespace-stats-under-tenant-namespace
  /admin/v2/stats/topics/{tenant}:
    get:
      summary: "Get topic stats for tenant"
      description: "Get stats for topics under the specified tenant"
      operationId: idTopicStatsTenant
      parameters:
        - name: tenant
          in: path
          description: tenant
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            map of individual topics stats, key is the topic full name, the
            value is the stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statsResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: over rate limit
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - topics-stats-under-tenant
  /admin/v2/stats/topics/{tenant}/{namespace}:
    get:
      summary: "Get topic stats for namespace"
      description: "Get stats for topics under the specified tenant and namespace"
      operationId: idTopicStatsTenantNamespace
      parameters:
        - name: tenant
          in: path
          description: tenant
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          description: namespace
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            map of individual topics stats, key is the topic full name, the
            value is the stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statsResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: over rate limit
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - topics-stats-under-tenant-namespace
  /v2/streaming/clusters:
    get:
      summary: "Get list of Pulsar clusters"
      description: "Get a list of Pulsar clusters under a Pulsar instance"
      operationId: idOfTenant
      parameters:
        - description: Cloud provider. For example, aws, gcp, azure, or digital+ocean
          in: query
          name: provider
          schema:
            type: string
        - description: Cloud provider region. For example, us-east1, us-west1, toronto
          in: query
          name: region
          schema:
            type: string
      responses:
        "200":
          description: Pulsar cluster list successfully returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pulsarClustersResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Cloud provider or region not found
        "429":
          description: Over rate limit
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - get-all-pulsar-clusters
  /v2/streaming/orgs/{org}/tenants:
    get:
      summary: "Get all Pulsar tenants under organization"
      description: Get all Pulsar tenants under the specified organization
      operationId: getPulsarClusters
      parameters:
        - name: org
          in: path
          description: org
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of tenants successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tenantClusterPlansResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: Over rate limit
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - list-tenants-for-an-org
  /v2/streaming/orgs/{org}/tenants/{tenant}:
    get:
      summary: "Get tenant under organization"
      description: "Get the specified tenant under the specified organization"
      deprecated: true
      operationId: getStreamingTenantsByOrg
      parameters:
        - name: tenant
          in: path
          description: tenant
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: org
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of tenants successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantClusterPlanResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: Over rate limit
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - list-the-tenant-under-the-org
  /v2/streaming/providers:
    get:
      summary: Gets list of providers and regions
      description: Returns all available providers and all regions under each provider
      operationId: getStreamingProviders
      responses:
        "200":
          description: All providers and regions under each provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudProviderRegionResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: Over rate limit
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - get-cloud-providers-regions
  /v2/streaming/tenants:
    get:
      summary: "Get all Pulsar tenants under organization from token"
      description:
        "Lists all Pulsar tenants under the organization that is retrieved from
        the token in the authorization header"
      operationId: getTenants
      responses:
        "200":
          description: List of tenants successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tenantClusterPlansResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: over rate limit
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - list-tenants-under-the-org-in-token
    post:
      summary: "Creates tenant with defaults"
      description: "Creates a tenant, the default namespace, a plan policy, and a Pulsar JWT"
      operationId: idOfCreateTenantEndpoint
      parameters:
        - description:
            A topic name for auto-creation (if not specified, no topic is
            created)
          in: query
          name: topic
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tenantRequest"
        description: Request body for tenant creation
      responses:
        "200":
          description: Tenant successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantClusterPlanResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "409":
          description: Tenant already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - create-tenant-namespace-JWT
  /v2/streaming/tenants/{tenant}/clusters/{cluster}:
    delete:
      summary: "Deletes a tenant"
      description: "Deletes a tenant from a cluster"
      operationId: deleteStreamingTenant
      parameters:
        - name: tenant
          in: path
          description: tenant
          required: true
          schema:
            type: string
        - name: cluster
          in: path
          description: cluster
          required: true
          schema:
            type: string
        - description:
            Performs a soft delete that only marks the tenant as deleted in the
            database (opt=soft)
          in: query
          name: opt
          schema:
            type: string
      responses:
        "202":
          description: Tenant deleted successfully
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: over rate limit
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - delete-tenant-from-cluster

  /v2/streaming/tenants/{tenant}/limits:
    get:
      summary: "Gets number of and limits of namespaces and topics for tenant"
      description:
        "For the specified tenant, returns the current number of namespaces and
        topics, and the limits for both"
      operationId: getLimits
      parameters:
        - name: tenant
          in: path
          description: tenant
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of tenant namespaces, topics, and the limits for both
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tenantLimitResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "429":
          description: Over rate limit
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - get-tenant-limit-usage
  /v2/streaming/tenants/{tenant}:
    get:
      tags:
      - tenants
      description: Returns 200 if the tenant details were retrieved successfully
      operationId: getStreamingTenant
      parameters:
      - name: Authorization
        in: header
        description: Astra token (https://docs.datastax.com/en/streaming/astra-streaming/operations/astream-token-gen.html#astra-token)
        required: true
        schema:
          type: string
      - name: X-DataStax-Pulsar-Cluster
        in: header
        description: The name of the Pulsar cluster on which the tenant resides.
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        description: Name of the Pulsar streaming tenant
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response containing tenant data.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TenantClusterPlanResponse'
        "401":
          description: Authentication failure
          content: {}
        "404":
          description: Tenant not found
          content: {}
    head:
      summary: "Returns 200 if the tenant is reserved under the specified query
        parameters"
      description:
        Returns 200 if the tenant is reserved under the specified query
        parameters
      operationId: getTeneantLimitUsage
      parameters:
        - name: tenant
          in: path
          description: Name of the streaming tenant
          required: true
          schema:
            type: string
        - description:
            Cloud provider, for example, aws, gcp, azure; this is required to
            evaluate whether a tenant has been reserved by its org owner
          in: query
          name: provider
          schema:
            type: string
        - description:
            Cloud provider region, for example, us-east1, us-west1; this is
            required to evaluate whether a tenant has been reserved by its org
            owner
          in: query
          name: region
          schema:
            type: string
      responses:
        "200":
          description: Tenant name is reserved and cannot be used again
        "400":
          description:
            incorrect or incomplete cloud provider and region in the query
            parameters
        "401":
          description: Authentication failure
        "404":
          description:
            Tenant name is available either globally or for the specified query
            parameters
        "429":
          description: Over rate limit
        "500":
          description: Failed to read the HTTP body
      tags:
        - evaluate-the-tenant-is-reserved
  /admin/v3/astra/tenants/{tenantName}/cdc:
    post:
      servers:
        - url: https://api.streaming.datastax.com
          description: Override base path for the cdc operation
      summary: "Creates cdc for tenant"
      description: "Enable CDC for an AstraDB table and a Streaming tenant"
      operationId: enableCDC
      parameters:
        - description: Streaming tenant name
          in: path
          required: true
          name: tenantName
          schema:
            type: string
        - in: header
          name: X-DataStax-Pulsar-Cluster
          schema:
            type: string
          required: true
        - in: header
          name: authorization
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cdcRequest"
        description: Request body for enabling cdc
      responses:
        "200":
          description: cdc successfully enabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createdTenantResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "409":
          description: cdc already enabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
    get:
      servers:
        - url: https://api.streaming.datastax.com
          description: Override base path for the cdc operation
      summary: "Gets cdc for tenant"
      description: "Gets CDC for an AstraDB table and a Streaming tenant"
      operationId: getCDC
      parameters:
        - description: Streaming tenant name
          in: path
          required: true
          name: tenantName
          schema:
            type: string
        - in: header
          name: X-DataStax-Pulsar-Cluster
          schema:
            type: string
          required: true
        - in: header
          name: authorization
          schema:
            type: string
          required: true
      responses:
        "200":
          description: cdc
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createdTenantResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
    delete:
      servers:
        - url: https://api.streaming.datastax.com
          description: Override base path for the cdc operation
      summary: "Deletes cdc for tenant"
      description: "Deletes CDC for an AstraDB table and a Streaming tenant"
      operationId: deleteCDC
      parameters:
        - description: Streaming tenant name
          in: path
          required: true
          name: tenantName
          schema:
            type: string
        - in: header
          name: X-DataStax-Pulsar-Cluster
          schema:
            type: string
          required: true
        - in: header
          name: authorization
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cdcRequest"
        description: Request body for enabling cdc
      responses:
        "200":
          description: cdc successfully deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createdTenantResponse"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "409":
          description: cdc already deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "500":
          description: Failed to read the HTTP body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /admin/v3/sinks/builtinsinks:
    get:
      description: Gets built in sinks
      operationId: getBuiltInSinks
      parameters:
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "401":
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: not found
        "500":
          description: General server failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"

  /admin/v2/persistent/{tenant}/{namespace}/:
    get:
      description: Gets topics for a tenant / namespace
      operationId: getTopics
      parameters:
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: false
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
        "401":
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"

  # https://pulsar-admin.docs.streaming.datastax.com/#/
  /admin/v2/persistent/{tenant}/{namespace}/{topic}:
    put:
      description: Creates a topic for a tenant / namespace / topic name
      operationId: createTopic
      parameters:
        - description: Astra Org ID.
          in: header
          name: X-DataStax-Current-Org
          required: false
          schema:
            type: string
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: Name of the topic
          in: path
          name: topic
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
        "401":
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
    delete:
      description: Deletes topic for a tenant / namespace / topic name
      operationId: deleteTopic
      parameters:
        - description: Astra Org ID.
          in: header
          name: X-DataStax-Current-Org
          required: false
          schema:
            type: string
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: Name of the topic
          in: path
          name: topic
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
        "401":
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"

  /admin/v3/astrasinks/{tenant}/{namespace}/{sinkName}:
    delete:
      description: Deletes Sink for a tenant / namespace / sink name
      operationId: deleteSink
      parameters:
        - description: Astra Org ID.
          in: header
          name: X-DataStax-Current-Org
          required: true
          schema:
            type: string
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: Name of the sink
          in: path
          name: sinkName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
        "401":
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - connectors
    get:
      description: Gets Sink for a tenant / namespace / sink name
      operationId: getSinks
      parameters:
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: Name of the sink
          in: path
          name: sinkName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
        "401":
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - connectors
    post:
      description: Creates a new Sink using the given JSON config
      operationId: createSinkJSON
      parameters:
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Org ID.
          in: header
          name: X-DataStax-Current-Org
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: Name of the sink
          in: path
          name: sinkName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SinkConfig"
      responses:
        "204":
          description: success
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - connectors
    put:
      description: Update a Sink using the given JSON config
      operationId: updateSinkJSON
      parameters:
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Org ID.
          in: header
          name: X-DataStax-Current-Org
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: Name of the sink
          in: path
          name: sinkName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SinkConfig"
      responses:
        "204":
          description: success
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - connectors
  /admin/v3/astrasources/{tenant}/{namespace}/{sourceName}:
    post:
      description: Creates a new Source using the given JSON config
      operationId: createSourceJSON
      parameters:
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Org ID.
          in: header
          name: X-DataStax-Current-Org
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: source name
          in: path
          name: sourceName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceConfig"
      responses:
        "204":
          description: success
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - connectors
    put:
      description: Update a source using the given JSON config
      operationId: updateSourceJSON
      parameters:
        - description: Astra JWT token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Astra Org ID.
          in: header
          name: X-DataStax-Current-Org
          required: true
          schema:
            type: string
        - description: Astra Streaming Cluster Name.
          in: header
          name: X-DataStax-Pulsar-Cluster
          required: true
          schema:
            type: string
        - description: Name of the pulsar tenant
          in: path
          name: tenant
          required: true
          schema:
            type: string
        - description: pulsar namespace
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: source name
          in: path
          name: sourceName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceConfig"
      responses:
        "204":
          description: success
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        "404":
          description: Tenant or namespace not found
        "500":
          description: General server failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      tags:
        - connectors

  /admin/v2/namespaces/{tenant}/{namespace}:
    get:
      tags:
        - namespaces
      summary: PS, PT, AK - Get the dump all the policies specified for a namespace.
      description: ""
      operationId: getNamespace
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tenant
          in: path
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: object
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: Tenant or cluster or namespace doesn't exist
    put:
      tags:
        - namespaces
      summary: PS, PT, AK - Creates a new namespace with the specified policies
      description: ""
      operationId: createNamespace
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tenant
          in: path
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          description: Policies for the namespace
          required: false
          schema:
            type: object
      responses:
        "204":
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: Tenant or cluster doesn't exist
        "409":
          description: Namespace already exists
        "412":
          description: Namespace name is not valid
    delete:
      tags:
        - namespaces
      summary: PS, PT, AK - Delete a namespace and all the topics under it.
      description: ""
      operationId: deleteNamespace
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tenant
          in: path
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: force
          in: query
          required: false
          schema:
            type: boolean
          default: false
        - name: authoritative
          in: query
          required: false
          schema:
            type: boolean
          default: false
      responses:
        "204":
          description: successful operation
        "307":
          description: Current broker doesn't serve the namespace
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: Tenant or cluster or namespace doesn't exist
        "409":
          description: Namespace is not empty

  /v2/streaming/tenants/{tenant}/tokens:
    get:
      tags:
        - pulsar-tokens
      summary: List all pulsar tokens under the specified tenant
      operationId: getPulsarTokensByTenant
      parameters:
        - name: Authorization
          in: header
          description: Astra token (https://docs.datastax.com/en/streaming/astra-streaming/operations/astream-token-gen.html#astra-token)
          required: true
          schema:
            type: string
        - name: X-DataStax-Current-Org
          in: header
          description: Astra Org ID.
          required: true
          schema:
            type: string
        - name: X-DataStax-Pulsar-Cluster
          in: header
          description: Astra Streaming Cluster Name.
          required: true
          schema:
            type: string
        - name: tenant
          in: path
          description: Name of the pulsar tenant
          required: true
          schema:
            type: string
      responses:
        200:
          description:
            List of pulsar JWT token payloads under the given tenant. Returns
            a list of json objects each representing the payload portion of the token.
            The claims included in the payload can include (but are not limited to)
            the standard claims defined in https://datatracker.ietf.org/doc/html/rfc7519.html
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TenantToken"
        401:
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: Tenant not found
          content: {}
        500:
          description: Failed to retreive tokens
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
    post:
      tags:
        - pulsar-tokens
      summary: Create new pulsar token for the given tenant.
      operationId: CreateTenantTokenHandler
      parameters:
        - name: Authorization
          in: header
          description: Astra token (https://docs.datastax.com/en/streaming/astra-streaming/operations/astream-token-gen.html#astra-token)
          required: true
          schema:
            type: string
        - name: X-DataStax-Current-Org
          in: header
          description: Astra Org ID.
          required: true
          schema:
            type: string
        - name: X-DataStax-Pulsar-Cluster
          in: header
          description: Astra Streaming Cluster Name.
          required: true
          schema:
            type: string
        - name: tenant
          in: path
          description: Name of the pulsar tenant
          required: true
          schema:
            type: string
      responses:
        201:
          description:
            New token created.  Returns the JWT token string which can
            be decoded to get the payload information such as creation time (iat),
            expiration (exp) and token id (tokenid). More information on the JWT format
            available on [wikipedia](https://en.wikipedia.org/wiki/JSON_Web_Token)
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tokenResponse"
        401:
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: Tenant not found
          content: {}
        409:
          description: Exceeded the token limit for this tenant
          content: {}
        500:
          description: Failed to create token
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
  /v2/streaming/tenants/{tenant}/tokens/{tokenID}:
    get:
      tags:
        - pulsar-tokens
      description: Get the given token from the given tenant
      operationId: getPulsarTokenByID
      parameters:
        - name: Authorization
          in: header
          description: Astra token (https://docs.datastax.com/en/streaming/astra-streaming/operations/astream-token-gen.html#astra-token)
          required: true
          schema:
            type: string
        - name: X-DataStax-Current-Org
          in: header
          description: Astra Org ID.
          required: true
          schema:
            type: string
        - name: X-DataStax-Pulsar-Cluster
          in: header
          description: Astra Streaming Cluster Name.
          required: true
          schema:
            type: string
        - name: tenant
          in: path
          description: Name of the pulsar tenant
          required: true
          schema:
            type: string
        - name: tokenID
          in: path
          description: ID of the token
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content: {}
        401:
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: Tenant not found or token not found
          content: {}
        500:
          description: Failed to get token
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
    delete:
      tags:
        - pulsar-tokens
      description: Delete the given token from the given tenant
      operationId: deletePulsarTokenByID
      parameters:
        - name: Authorization
          in: header
          description: Astra token (https://docs.datastax.com/en/streaming/astra-streaming/operations/astream-token-gen.html#astra-token)
          required: true
          schema:
            type: string
        - name: X-DataStax-Current-Org
          in: header
          description: Astra Org ID.
          required: true
          schema:
            type: string
        - name: X-DataStax-Pulsar-Cluster
          in: header
          description: Astra Streaming Cluster Name.
          required: true
          schema:
            type: string
        - name: tenant
          in: path
          description: Name of the pulsar tenant
          required: true
          schema:
            type: string
        - name: tokenID
          in: path
          description: ID of the token to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Token deleted
          content: {}
        401:
          description: Authentication failure
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: Tenant not found
          content: {}
        500:
          description: Failed to delete token
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorResponse"
  /v3/streaming/tenants/{tenant}/tokens:
    post:
      tags:
        - pulsar-tokens
      summary: Create new pulsar token for the given tenant with JSON response.
      description:
        Returns a JSON response instead of the string returned by the v2
        endpoint.
      operationId: CreateTenantTokenHandlerV3
      parameters:
        - name: Authorization
          in: header
          description:
            Astra token (https://docs.datastax.com/en/streaming/astra-streaming/operations/astream-token-gen.html#astra-token)
            or a Keycloak token.
          required: true
          schema:
            type: string
        - name: X-DataStax-Current-Org
          in: header
          description: Astra Org ID.
          required: true
          schema:
            type: string
        - name: X-DataStax-Pulsar-Cluster
          in: header
          description: Astra Streaming Cluster Name.
          required: true
          schema:
            type: string
        - name: tenant
          in: path
          description: Name of the pulsar tenant
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTenantTokenV3Request"
        required: false
      responses:
        201:
          description:
            New token created.  Returns JSON containing the rolename and
            the JWT token string which can be decoded to get the payload information
            such as creation time (iat), expiration (exp) and token id (tokenid).
            More information on the JWT format available on [wikipedia](https://en.wikipedia.org/wiki/JSON_Web_Token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTenantTokenV3Response"
        401:
          description: Authentication failure
          content: {}
        404:
          description: Tenant not found
          content: {}
        409:
          description: Exceeded the token limit for this tenant
          content: {}
        500:
          description: Failed to create token
          content: {}
      x-codegen-request-body-name: body

## End Astra Streaming paths...

servers:
  - url: https://api.astra.datastax.com
components:
  parameters:
    DatabaseIdParam:
      in: path
      name: databaseId
      required: true
      description: String representation of the database ID
      schema:
        type: string

    TagNameParam:
      in: path
      name: tagName
      required: true
      description: Name of database tag
      schema:
        type: string

    KeyspaceNameParam:
      in: path
      name: keyspaceName
      required: true
      description: Name of database keyspace
      schema:
        type: string

    ClientIdParam:
      in: path
      name: clientId
      required: true
      schema:
        type: string
      description: clientID to revoke token for

    RoleIdParam:
      in: path
      name: roleID
      required: true
      schema:
        type: string
      description: id for the role

    UserIdParam:
      in: path
      name: userID
      required: true
      schema:
        type: string
      description: id for the user

    AddressesQueryParam:
      in: query
      name: addresses
      required: false
      schema:
        type: array
        items:
          type: string
      description: Array of addresses

    ## Astra Streaming parameters

    OrgParam:
      in: path
      name: org
      required: true
      description: String representation of the Org ID
      schema:
        type: string

    TenantNameParam:
      in: path
      name: tenant
      required: true
      description: Tenant name
      schema:
        type: string

    ClusterNameParam:
      in: path
      name: cluster
      required: true
      description: Cluster name
      schema:
        type: string

  ## End Astra Streaming parameters

  schemas:
    SourceConfig:
      type: object
      properties:
        tenant:
          type: string
        namespace:
          type: string
        name:
          type: string
        className:
          type: string
        topicName:
          type: string
        producerConfig:
          "$ref": "#/components/schemas/ProducerConfig"
        serdeClassName:
          type: string
        schemaType:
          type: string
        configs:
          type: object
          additionalProperties:
            type: object
        secrets:
          type: object
          additionalProperties:
            type: object
        parallelism:
          type: integer
          format: int32
        processingGuarantees:
          type: string
          enum:
            - ATLEAST_ONCE
            - ATMOST_ONCE
            - EFFECTIVELY_ONCE
        resources:
          "$ref": "#/components/schemas/Resources"
        archive:
          type: string
        runtimeFlags:
          type: string
        customRuntimeOptions:
          type: string
        batchSourceConfig:
          "$ref": "#/components/schemas/BatchSourceConfig"
        batchBuilder:
          type: string
    ProducerConfig:
      type: object
      properties:
        maxPendingMessages:
          type: integer
          format: int32
        maxPendingMessagesAcrossPartitions:
          type: integer
          format: int32
        useThreadLocalProducers:
          type: boolean
        cryptoConfig:
          "$ref": "#/components/schemas/CryptoConfig"
        batchBuilder:
          type: string
    BatchSourceConfig:
      type: object
      properties:
        discoveryTriggererClassName:
          type: string
        discoveryTriggererConfig:
          type: object
          additionalProperties:
            type: object
    CryptoConfig:
      type: object
      properties:
        cryptoKeyReaderClassName:
          type: string
        cryptoKeyReaderConfig:
          type: object
          additionalProperties:
            type: object
        encryptionKeys:
          type: array
          items:
            type: string
        producerCryptoFailureAction:
          type: string
          enum:
            - FAIL
            - SEND
        consumerCryptoFailureAction:
          type: string
          enum:
            - FAIL
            - DISCARD
            - CONSUME

    SinkConfig:
      type: object
      properties:
        tenant:
          type: string
        namespace:
          type: string
        name:
          type: string
        className:
          type: string
        sourceSubscriptionName:
          type: string
        sourceSubscriptionPosition:
          type: string
          enum:
            - Latest
            - Earliest
        inputs:
          type: array
          items:
            type: string
        topicToSerdeClassName:
          type: object
          additionalProperties:
            type: string
        topicsPattern:
          type: string
        topicToSchemaType:
          type: object
          additionalProperties:
            type: string
        topicToSchemaProperties:
          type: object
          additionalProperties:
            type: string
        inputSpecs:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/ConsumerConfig"
        maxMessageRetries:
          type: integer
          format: int32
        deadLetterTopic:
          type: string
        configs:
          type: object
        secrets:
          type: object
          additionalProperties:
            type: object
        parallelism:
          type: integer
          format: int32
        processingGuarantees:
          type: string
          enum:
            - ATLEAST_ONCE
            - ATMOST_ONCE
            - EFFECTIVELY_ONCE
        retainOrdering:
          type: boolean
        retainKeyOrdering:
          type: boolean
        resources:
          "$ref": "#/components/schemas/Resources"
        autoAck:
          type: boolean
        timeoutMs:
          type: integer
          format: int64
        negativeAckRedeliveryDelayMs:
          type: integer
          format: int64
        sinkType:
          type: string
        archive:
          type: string
        cleanupSubscription:
          type: boolean
        runtimeFlags:
          type: string
        customRuntimeOptions:
          type: string
    Resources:
      type: object
      properties:
        cpu:
          type: number
          format: double
        ram:
          type: integer
          format: int64
        disk:
          type: integer
          format: int64
    ConsumerConfig:
      type: object
      properties:
        schemaType:
          type: string
        serdeClassName:
          type: string
        schemaProperties:
          type: object
          additionalProperties:
            type: string
        consumerProperties:
          type: object
          additionalProperties:
            type: string
        receiverQueueSize:
          type: integer
          format: int32
        cryptoConfig:
          "$ref": "#/components/schemas/CryptoConfig"
        poolMessages:
          type: boolean
        regexPattern:
          type: boolean

    cdcRequest:
      type: "object"
      description: "cdcRequest model"
      required:
        - "orgId"
        - "databaseId"
        - "databaseName"
        - "keyspace"
        - "tableName"
        - "topicPartitions"
      properties:
        orgId:
          type: "string"
          description: "The unique system generated identifier of the organization"
        databaseId:
          type: "string"
          description: "Astra database id"
        databaseName:
          type: "string"
          description: "Astra database name"
        keyspace:
          type: "string"
          description: "keyspace"
        tableName:
          type: "string"
          description: "tableName"
        topicPartitions:
          type: "integer"
          description: "Number of partitions for pulsar topic (e.g. 3)"

    UserInvite:
      type: "object"
      description: "The userInvite model"
      required:
        - "email"
        - "orgID"
        - "roles"
      properties:
        email:
          type: "string"
          description: "The email of the user being invited"
        orgID:
          type: "string"
          description: "The unique system generated identifier of the organization"
        roles:
          type: "array"
          items:
            type: "string"

    GetOrgUsersResponse:
      type: "object"
      required:
        - orgID
        - orgName
        - users
      properties:
        orgID:
          type: "string"
        orgName:
          type: "string"
        users:
          type: "array"
          description: "an array of users in the organization"
          items:
            $ref: "#/components/schemas/UserResponse"

    UserResponse:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: "string"
          example: "3476f3bb-10df-4d2f-ac2b-f05c65676724"
        email:
          type: "string"
          example: "joe@datastax.com"
        status:
          type: "string"
          description: "The status of a user within an organization either active or invited"
          example: "active"
        roles:
          type: "array"
          description: "an array of roles the user belongs to for an organization"
          items:
            $ref: "#/components/schemas/Role"

    ServiceAccountTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: The application token to use in each request.
          example: Bearer eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDA...

    ServiceAccountTokenInput:
      type: object
      required:
        - clientName
        - clientId
        - clientSecret
      properties:
        clientName:
          type: string
          description: The organization name in a more human readable format.
          example: Binford Tools
        clientId:
          type: string
          description: The unique identifier for the client for authentication.
          example: binford
        clientSecret:
          type: string
          description: The UUID client secret for the service account from
            the create service account response in the user interface.
          format: uuid
          example: "00b03a37-209c-462a-971b-be35ab3321de"

    StatusEnum:
      type: string
      enum:
        [
          ACTIVE,
          PENDING,
          PREPARING,
          PREPARED,
          INITIALIZING,
          PARKED,
          PARKING,
          UNPARKING,
          TERMINATED,
          TERMINATING,
          RESIZING,
          ERROR,
          MAINTENANCE,
          HIBERNATING,
          HIBERNATED,
          RESUMING,
          UNKNOWN,
        ]
      example: ACTIVE

    Database:
      type: object
      description: Database contains the key information about a database.
      required:
        - id
        - orgId
        - ownerId
        - info
        - status
      properties:
        id:
          type: string
          example: "1234-5678-91011121-3141"
        orgId:
          type: string
          example: "organizations/7142-1283-54249566-3707"
        ownerId:
          type: string
          example: "users/8243-2404-85664728-0889"
        info:
          $ref: "#/components/schemas/DatabaseInfo"
        creationTime:
          type: string
          description: CreationTime in ISO RFC3339 format
          example: "2012-11-01T22:08:41+00:00"
        terminationTime:
          type: string
          description: TerminationTime in ISO RFC3339 format
          example: "2019-11-01T22:08:41+00:00"
        status:
          $ref: "#/components/schemas/StatusEnum"
        storage:
          $ref: "#/components/schemas/Storage"
        availableActions:
          type: array
          items:
            type: string
            enum:
              [
                park,
                unpark,
                resize,
                resetPassword,
                addKeyspace,
                addDatacenters,
                terminateDatacenter,
                getCreds,
                terminate,
                removeKeyspace,
                addTable,
                removeMigrationProxy,
                launchMigrationProxy,
              ]
            example: park, terminate
        message:
          type: string
          description: Message to the customer about the cluster.
          example: Auto parked due to inactivity
        studioUrl:
          type: string
          example: "http://path-to-studio:port"
        grafanaUrl:
          type: string
          example: "http://path-to-grafana:port"
        cqlshUrl:
          type: string
          example: "http://path-to-cqlsh:port/cqlsh"
        graphqlUrl:
          type: string
          example: "http://path-to-graqphl:port/api/graphql"
        dataEndpointUrl:
          type: string
          example: "http://path-to-dataendpoint:port/api/rest"

    DatabaseInfoCreate:
      type: object
      required:
        - name
        - keyspace
        - cloudProvider
        - tier
        - capacityUnits
        - region
      description: DatabaseInfo is the user-provided information describing a database.
      properties:
        name:
          type: string
          example: mySplendidDatabase
          description: Name of the database--user friendly identifier.
        keyspace:
          type: string
          example: myKeyspace
          description: Keyspace name in database.
        cloudProvider:
          type: string
          example: AWS
          enum:
            - AWS
            - GCP
          #            - AZURE
          description: This is the cloud provider where the database lives.
        tier:
          type: string
          example: serverless
          enum:
            - serverless
          description: With the exception of classic databases, all databases are serverless. Classic databases can no longer be created with the DevOps API.
        capacityUnits:
          type: integer
          example: 1
          minimum: 1
          maximum: 1
          description: Capacity units were used for classic databases, but are not used for serverless databases. Enter 1 CU for serverless databases. Classic databases can no longer be created with the DevOps API.
        region:
          type: string
          example: us-west-2
          description: Region refers to the cloud region.

    DatabaseInfo:
      type: object
      description: DatabaseInfo is the user-provided information describing a database.
      properties:
        name:
          type: string
          example: mySplendidDatabase
          description: Name of the database--user friendly identifier.
        keyspace:
          type: string
          example: myKeyspace
          description: Keyspace name in database.
        cloudProvider:
          type: string
          example: AWS
          enum:
            - AWS
            - GCP
          #            - AZURE
          description: This is the cloud provider where the database lives.
        tier:
          type: string
          example: serverless
          enum:
            - serverless
          description: With the exception of classic databases, all databases are serverless. Classic databases can no longer be created with the DevOps API.
        capacityUnits:
          type: integer
          example: 1
          minimum: 1
          maximum: 1
          description: Capacity units were used for classic databases, but are not used for serverless databases. Enter 1 CU for serverless databases. Classic databases can no longer be created with the DevOps API.
        region:
          type: string
          example: us-west-2
          description: Region refers to the cloud region.
        user:
          type: string
          example: db_admin
          description: User is the user to access the database.
        password:
          type: string
          example: "*****"
          description: Password for the user to access the database.
        additionalKeyspaces:
          type: array
          maximum: 1
          items:
            type: string
            example: additionalKeyspace
          description: Additional keyspaces names in database.

    CredsURL:
      description: CredsURL from which the creds zip may be downloaded.
      type: object
      required:
        - downloadURL
      properties:
        downloadURL:
          type: string
          example: nifty.cloud.datastax.com:9092
          description: DownloadURL is only valid for about 5 minutes.
        downloadURLInternal:
          type: string
          example: internal-nifty.cloud.datastax.com:9092
          description: Internal DownloadURL is only valid for about 5 minutes.
        downloadURLMigrationProxy:
          type: string
          example: proxy-nifty.cloud.datastax.com:9092
          description: Migration Proxy DownloadURL is only valid for about 5 minutes.
        downloadURLMigrationProxyInternal:
          type: string
          example: proxy-nifty.cloud.datastax.com:9092
          description: Internal Migration Proxy DownloadURL is only valid for about 5 minutes.

    UserPassword:
      description: UserPassword specifies a username and new password. The specified password will be updated for the specified database user.
      type: object
      properties:
        username:
          type: string
          example: dbusername
        password:
          type: string
          example: MyNewSecur3Passw0rd
          description: New password (min 6 characters)

    MigrationProxyConfiguration:
      description: Configuration of the migration proxy and mappings of astra node to a customer node currently in use.
      type: object
      required:
        - originUsername
        - originPassword
        - mappings
      properties:
        originUsername:
          type: string
          example: cassandraUsername
          description: origin cassandra username
        originPassword:
          type: string
          example: cassandraPassword
          description: origin cassandra password
        mappings:
          type: array
          items:
            $ref: "#/components/schemas/MigrationProxyMapping"

    MigrationProxyMapping:
      description: A mapping of Astra node to a customer node currently in use.
      type: object
      required:
        - originIP
        - originPort
        - rack
        - rackNodeOrdinal
      properties:
        originIP:
          type: string
          example: 172.18.19.20
          description: IP on which the node currently in use is accessible.
        originPort:
          type: integer
          example: 9042
          description: Port on which the node currently in use is accessible.
        rack:
          type: integer
          example: 2
          description: The number of the rack; usually 0, 1, or 2.
        rackNodeOrdinal:
          type: integer
          example: 1
          description: The number of the node in a given rack, starting with 0.

    CapacityUnits:
      description: CapacityUnits is used to horizontally scale a database.
      type: object
      properties:
        capacityUnits:
          type: integer
          minimum: 1
          maximum: 100
          example: 4
          description: CapacityUnits can be increased by a max of three additional capacity units per operation. Reducing capacity units is not currently supported.
    Storage:
      description: Storage contains the information about how much storage space a cluster has available.
      type: object
      required:
        - nodeCount
        - replicationFactor
        - totalStorage
      properties:
        nodeCount:
          type: integer
          example: 6
          description: NodeCount for the cluster.
        replicationFactor:
          type: integer
          example: 3
          description: ReplicationFactor is the number of nodes storing a piece of data.
        totalStorage:
          type: integer
          example: 800
          description: TotalStorage of the cluster in GB.
        usedStorage:
          type: integer
          example: 348
          description: UsedStorage in GB.

    RegionCombination:
      type: object
      description: RegionCombination defines a tier, cloud provider, and region combination.
      required:
        - tier
        - cloudProvider
        - region
        - cost
      properties:
        tier:
          type: string
          example: Free
        cloudProvider:
          type: string
          example: GCP
        region:
          type: string
          example: us-east1
        cost:
          $ref: "#/components/schemas/Costs"

    AvailableRegionCombination:
      type: object
      description: AvailableRegionCombination defines a tier, cloud provider, and region combination.
      required:
        - tier
        - cloudProvider
        - region
        - cost
        - databaseCountUsed
        - databaseCountLimit
        - capacityUnitsUsed
        - capacityUnitsLimit
        - defaultStoragePerCapacityUnitGb
      properties:
        tier:
          type: string
          example: Free
        cloudProvider:
          type: string
          example: GCP
        region:
          type: string
          example: us-east1
        cost:
          $ref: "#/components/schemas/Costs"
        databaseCountUsed:
          type: integer
          example: 0
        databaseCountLimit:
          type: integer
          example: 1
        capacityUnitsUsed:
          type: integer
          example: 0
        capacityUnitsLimit:
          type: integer
          example: 30
        defaultStoragePerCapacityUnitGb:
          type: integer
          example: 500

    Costs:
      properties:
        costPerMinCents:
          type: number
          format: double
          example: 0
        costPerHourCents:
          type: number
          format: double
          example: 0
        costPerDayCents:
          type: number
          format: double
          example: 0
        costPerMonthCents:
          type: number
          format: double
          example: 0
        costPerMinParkedCents:
          type: number
          format: double
          example: 0
        costPerHourParkedCents:
          type: number
          format: double
          example: 0
        costPerDayParkedCents:
          type: number
          format: double
          example: 0
        costPerMonthParkedCents:
          type: number
          format: double
          example: 0

    Errors:
      description: Errors is a collection of individual Error objects.
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"

    Error:
      description: ModelError information that is returned to users.
      type: object
      required:
        - id
        - message
      properties:
        ID:
          type: integer
          example: 123
          description: API specific error code.
        message:
          type: string
          example: Something is broken
          description: User-friendly description of error.

    Role:
      type: "object"
      description: "Details of a user role and its policy details."
      properties:
        id:
          type: "string"
          description: "The unique system generated identifier of the role."
        name:
          type: "string"
          description: "The name of the role."
        policy:
          $ref: "#/components/schemas/Policy"
        last_update_datetime:
          type: "string"
          description: "The date and time of the last update on the role."
          format: "date-time"
        last_update_userid:
          type: "string"
          description: "The userID of the user who last updated the role."
    Policy:
      type: object
      description: "A policy for a role in Astra."
      required:
        - description
        - actions
        - effect
        - resources
      properties:
        description:
          description: "A description of this policy."
          type: string
        resources:
          type: array
          description: "The resources this policy can manipulate."
          items:
            type: string
            example: "drn:astra:org:<organizationId>"
        actions:
          type: array
          description: "The actions this policy can take. Example actions: 'org-billing-write' 'db-keyspace-create'."
          items:
            type: string
            enum:
              [
                "db-all-keyspace-create",
                "db-all-keyspace-describe",
                "db-cql",
                "db-graphql",
                "db-keyspace-alter",
                "db-keyspace-authorize",
                "db-keyspace-create",
                "db-keyspace-describe",
                "db-keyspace-drop",
                "db-keyspace-grant",
                "db-keyspace-modify",
                "db-rest",
                "db-table-alter",
                "db-table-authorize",
                "db-table-create",
                "db-table-describe",
                "db-table-drop",
                "db-table-grant",
                "db-table-modify",
                "db-table-select",
                "org-audits-read",
                "org-billing-read",
                "org-billing-write",
                "org-db-addpeering",
                "org-db-create",
                "org-db-expand",
                "org-db-managemigratorproxy",
                "org-db-passwordreset",
                "org-db-suspend",
                "org-db-terminate",
                "org-db-view",
                "org-external-auth-read",
                "org-external-auth-write",
                "org-notification-write",
                "org-read",
                "org-role-delete",
                "org-role-read",
                "org-role-write",
                "org-token-read",
                "org-token-write",
                "org-user-read",
                "org-user-write",
                "org-write",
              ]
        effect:
          type: string
          description: "Effect this policy will have on the provided resource."
          enum: [allow]

    Organization:
      type: object
      description: "An organization."
      required:
        - id
      properties:
        id:
          type: string
          description: "The organization UUID."
          example: "d04d1eb2-6a52-483e-ab16-faaad3d077a9"

    Roles:
      type: "array"
      description: "An array of roles."
      items:
        $ref: "#/components/schemas/Role"

    CreateRoleRequest:
      type: "object"
      description: "The createRole model."
      required:
        - name
        - policy
      properties:
        name:
          type: "string"
          description: The name for your custom role in your organization.
        policy:
          $ref: "#/components/schemas/Policy"

    UpdateRoleRequest:
      type: "object"
      description: "The updateRole model"
      required:
        - name
        - policy
      properties:
        name:
          type: "string"
          description: The name of the custom role you want to update in your organization.
        policy:
          $ref: "#/components/schemas/Policy"

    RoleInviteRequest:
      type: "object"
      description: "The roleInvite model."
      required:
        - roles
      properties:
        roles:
          type: "array"
          items:
            type: string

    AccessListRequest:
      type: "object"
      description: "The model used to build an access list."
      properties:
        addresses:
          type: array
          description: A listing of the allowed addresses
          items:
            $ref: "#/components/schemas/AddressRequest"
        configurations:
          $ref: "#/components/schemas/AccessListConfigurations"

    AccessListResponse:
      type: "object"
      description: "The response for a requested access list."
      properties:
        organizationId:
          type: string
          description: The unique identifier of the organization
          format: uuid
          example: 303a3598-0905-4b5d-9db2-4bf2f9790973
        databaseId:
          type: string
          description: The unique identifier of the database
          format: uuid
          example: 8fbcfe1d-56fa-4ed0-9aff-f57029feef1b
        addresses:
          type: array
          description: A listing of the allowed addresses
          items:
            $ref: "#/components/schemas/AddressResponse"
        configurations:
          $ref: "#/components/schemas/AccessListConfigurations"

    AddressRequest:
      type: object
      description: "The model used to build an address for an access list."
      required:
        - address
        - enabled
        - description
      properties:
        address:
          pattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
          type: string
          description:
            The address (IP address and subnet mask in CIDR notation) of the
            address to allow
          example: 137.187.23.0/24
        enabled:
          type: boolean
          description: The indication if the access address is enabled or not
          example: true
        description:
          type: string
          description: Description of this addresses use
          example: "This address allows the database connections from the production environment."

    AddressResponse:
      type: object
      description: "The response for a requested address in an access list."
      properties:
        address:
          pattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
          type: string
          description:
            The address (IP address and subnet mask in CIDR notation) of the
            address to allow.
          example: 137.187.23.0/24
        enabled:
          type: boolean
          description: The indication if the access address is enabled or not.
          example: true
        description:
          type: string
          description: Description of this addresses use
          example: "This address allows the database connections from the production environment."
        lastUpdateDateTime:
          type: string
          description: The last update date/time for the access list.
          format: date-time
          example: "2021-01-21T17:32:28Z"

    AccessListConfigurations:
      required:
        - accessListEnabled
      type: object
      properties:
        accessListEnabled:
          type: boolean

    ValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
        validationFailures:
          type: array
          items:
            type: string
      description: The response for validation checks.

    GenerateTokenBody:
      type: "object"
      description: "The POST body to generate a token."
      required:
        - "roles"
      properties:
        roles:
          type: "array"
          description: "The roles for which the token will be generated."
          items:
            type: "string"
            example: "write"

    ClientRoleList:
      type: "object"
      description: "The response for a requested token."
      properties:
        clients:
          type: "array"
          description: "a list of clientId and associated roles."
          items:
            $ref: "#/components/schemas/ClientRole"

    ClientRole:
      type: "object"
      description: "An individual clientID and associated roles."
      properties:
        clientId:
          type: "string"
          description: "the clientID"
          example: "IFmJlTkNvptFzTDEQpQIEJud"
        roles:
          type: "array"
          items:
            type: "string"
            description: "Role associated with the client."

    GenerateTokenResponse:
      type: "object"
      description: "The response for a requested token."
      required:
        - "clientId"
        - "secret"
        - "orgId"
        - "roles"
      properties:
        clientId:
          type: "string"
          description: "The ID of the client (UUID)."
          format: "string"
        secret:
          type: "string"
          description: "The secret token."
          format: "string"
        orgId:
          type: "string"
          description: "The UUID of the organization."
          example: "uuid"
        roles:
          type: "array"
          description: "The roles for which the token will be generated."
          items:
            type: "string"
            example: "write"
        token:
          type: "string"
          description: "AstraCS:clientId:hex(sha256(secret))"
          example: "uuid"

    ## Astra Streaming schemas...
    #    CassandraCDCConfig:
    #      description: CassandraCDCConfig is the response struct for C* CDC table tracking
    #      properties:
    #        cdcStatus:
    #          type: string
    #          x-go-name: CDCStatus
    #        clusterName:
    #          type: string
    #          x-go-name: ClusterName
    #        connectorName:
    #          type: string
    #          x-go-name: ConnectorName
    #        connectorStatus:
    #          type: string
    #          x-go-name: ConnectorStatus
    #        cpu:
    #          format: int64
    #          type: integer
    #          x-go-name: CPU
    #        createdAt:
    #          format: date-time
    #          type: string
    #          x-go-name: CreatedAt
    #        dataTopic:
    #          type: string
    #          x-go-name: DataTopic
    #        databaseId:
    #          type: string
    #          x-go-name: DatabaseID
    #        databaseName:
    #          type: string
    #          x-go-name: DatabaseName
    #        databaseTable:
    #          type: string
    #          x-go-name: DatabaseTable
    #        eventTopic:
    #          type: string
    #          x-go-name: EventTopic
    #        instances:
    #          format: int64
    #          type: integer
    #          x-go-name: Instances
    #        keyspace:
    #          type: string
    #          x-go-name: Keyspace
    #        memory:
    #          format: int64
    #          type: integer
    #          x-go-name: Memory
    #        namespace:
    #          type: string
    #          x-go-name: Namespace
    #        orgId:
    #          type: string
    #          x-go-name: OrgID
    #        tenant:
    #          type: string
    #          x-go-name: Tenant
    #        updatedAt:
    #          format: date-time
    #          type: string
    #          x-go-name: UpdatedAt
    #      type: object
    #      x-go-package: github.com/riptano/bellburnell/src/policy
    ClusterResponse:
      description: ClusterResponse is the response struct for a cluster
      properties:
        brokerServiceUrl:
          type: string
          x-go-name: PulsarURL
        cloudProvider:
          type: string
          x-go-name: CloudProvider
        cloudRegion:
          type: string
          x-go-name: CloudProviderRegion
        clusterName:
          type: string
          x-go-name: ClusterName
        clusterType:
          type: string
          x-go-name: ClusterType
        webServiceUrl:
          type: string
          x-go-name: AdminURL
        websocketUrl:
          type: string
          x-go-name: WebsocketURL
      type: object
      x-go-package: github.com/riptano/bellburnell/src/policy
    CreateTenantTokenV3Request:
      type: object
      properties:
        exp:
          type: string
          description:
            Time duration before the token expires.  Expects a string format
            with a number and unit.  For example, '5m', '2h', '10d', etc.
          x-go-name: Exp
        role:
          type: string
          x-go-name: Role
        type:
          type: string
          x-go-name: Type
      description: CreateTenantTokenV3Request requests a new Pulsar token to
        be created
      x-go-package: github.com/riptano/bellburnell/src/route
    CreateTenantTokenV3Response:
      type: object
      properties:
        id:
          type: string
          description: ID unique within the scope of a Pulsar tenant
          x-go-name: ID
        rolename:
          type: string
          description: Rolename used for Pulsar authorization
          x-go-name: Rolename
        token:
          type: string
          description: JWT token string
          x-go-name: Token
      description:
        CreateTenantTokenV3Response wraps a newly generated Pulsar JWT
        token
      x-go-package: github.com/riptano/bellburnell/src/route
    LimitResponse:
      description: LimitResponse is a response for tenant limits
      properties:
        namespace_limit:
          format: int64
          type: integer
          x-go-name: NamespaceLimit
        topic_per_namespace_limit:
          format: int64
          type: integer
          x-go-name: TopicPerNamespaceLimit
        usage:
          items:
            $ref: "#/components/schemas/TenantNamespaceLimitUsage"
          type: array
          x-go-name: Usage
      type: object
      x-go-package: github.com/riptano/bellburnell/src/route
    ResponseErr:
      description: ResponseErr error struct for Pulsar compliant HTTP responses
      properties:
        reason:
          type: string
          x-go-name: Error
      type: object
      x-go-package: github.com/riptano/bellburnell/src/util
    TenantClusterPlanResponse:
      description: |-
        TenantClusterPlanResponse tenant per cluster access
        For initial creation so namespace and topic are added
      properties:
        astraOrgGUID:
          type: string
          x-go-name: OrgName
        brokerServiceUrl:
          type: string
          x-go-name: PulsarURL
        cloudProvider:
          type: string
          x-go-name: CloudProvider
        cloudProviderCode:
          type: string
          x-go-name: CloudProviderCode
        cloudRegion:
          type: string
          x-go-name: CloudProviderRegion
        clusterName:
          type: string
          x-go-name: ClusterName
        jvmVersion:
          type: string
          x-go-name: PulsarJVMVersion
        namespace:
          type: string
          x-go-name: Namespace
        plan:
          type: string
          x-go-name: Plan
        planCode:
          type: string
          x-go-name: PlanCode
        pulsarToken:
          type: string
          x-go-name: TenantPulsarToken
        pulsarVersion:
          type: string
          x-go-name: PulsarVersion
        status:
          type: string
          x-go-name: Status
        tenantName:
          type: string
          x-go-name: TenantName
        topic:
          type: string
          x-go-name: TopicName
        webServiceUrl:
          type: string
          x-go-name: AdminURL
        websocketQueryParamUrl:
          type: string
          x-go-name: WebsocketQueryParamURL
        websocketUrl:
          type: string
          x-go-name: WebsocketURL
        userMetricsUrl:
          type: string
          x-go-name: UserMetricsURL
        id:
          type: string
          x-go-name: Id
      type: object
      x-go-package: github.com/riptano/bellburnell/src/workflow
    TenantNamespaceLimitUsage:
      description: TenantNamespaceLimitUsage holds usages for enforcing limits
      properties:
        namespace:
          type: string
          x-go-name: Namespace
        topics:
          items:
            type: string
          type: array
          x-go-name: Topics
      type: object
      x-go-package: github.com/riptano/bellburnell/src/route
    Usage:
      description: Usage is the data usage per single tenant
      properties:
        backlogStorageByteSize:
          format: double
          type: number
          x-go-name: BacklogStorageSize
        consumerCount:
          format: double
          type: number
          x-go-name: ConsumerCount
        msgBacklogNumber:
          format: double
          type: number
          x-go-name: MsgBacklog
        msgRateIn:
          format: double
          type: number
          x-go-name: MsgRateIn
        msgRateOut:
          format: double
          type: number
          x-go-name: MsgRateOut
        name:
          type: string
          x-go-name: Name
        producerCount:
          format: double
          type: number
          x-go-name: ProducerCount
        storageSize:
          format: double
          type: number
          x-go-name: StorageSize
        subscriptionCount:
          format: double
          type: number
          x-go-name: SubscriptionCount
        subscriptionDelayed:
          format: double
          type: number
          x-go-name: SubscriptionDelayed
        throughputIn:
          format: double
          type: number
          x-go-name: ThroughputIn
        throughputOut:
          format: double
          type: number
          x-go-name: ThroughputOut
        totalBytesIn:
          format: double
          type: number
          x-go-name: TotalBytesIn
        totalBytesOut:
          format: double
          type: number
          x-go-name: TotalBytesOut
        totalMessagesIn:
          format: double
          type: number
          x-go-name: TotalMessagesIn
        totalMessagesOut:
          format: double
          type: number
          x-go-name: TotalMessagesOut
        updatedAt:
          format: date-time
          type: string
          x-go-name: UpdatedAt
      type: object
      x-go-package: github.com/riptano/bellburnell/src/metrics
    #    cdcTableConfigResponse:
    #      properties:
    #        Body:
    #          items:
    #            $ref: "#/components/schemas/CassandraCDCConfig"
    #          type: array
    #      type: object
    #      x-go-package: github.com/riptano/bellburnell/src/docs
    createdTenantResponse:
      properties:
        Body:
          $ref: "#/components/schemas/TenantClusterPlanResponse"
      type: object
      x-go-package: github.com/riptano/bellburnell/src/docs
    errorResponse:
      properties:
        Body:
          $ref: "#/components/schemas/ResponseErr"
      required:
        - Body
      type: object
      x-go-package: github.com/riptano/bellburnell/src/docs
    listOfMaps:
      items:
        additionalProperties:
          type: string
        type: object
      type: array
      x-go-package: github.com/riptano/bellburnell/src/docs
    listOfString:
      properties:
        Body:
          items:
            type: string
          type: array
      type: object
      x-go-package: github.com/riptano/bellburnell/src/docs
    providerRegionsResponse:
      properties:
        Body:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
      type: object
      x-go-package: github.com/riptano/bellburnell/src/docs
    pulsarClustersResponse:
      properties:
        Body:
          items:
            $ref: "#/components/schemas/ClusterResponse"
          type: array
      type: object
      x-go-package: github.com/riptano/bellburnell/src/docs
    statsResponse:
      properties:
        Body:
          additionalProperties:
            $ref: "#/components/schemas/Usage"
          type: object
      type: object
      x-go-package: github.com/riptano/bellburnell/src/docs
    tenantClusterPlansResponse:
      properties:
        Body:
          items:
            $ref: "#/components/schemas/TenantClusterPlanResponse"
          type: array
      type: array
      x-go-package: github.com/riptano/bellburnell/src/docs
    tenantLimitResponse:
      properties:
        Body:
          $ref: "#/components/schemas/LimitResponse"
      type: object
      x-go-package: github.com/riptano/bellburnell/src/docs
    tenantRequest:
      properties:
        cloudProvider:
          type: string
          x-go-name: CloudProvider
        cloudRegion:
          type: string
          x-go-name: CloudRegion
        orgID:
          type: string
          x-go-name: OrgID
        orgName:
          type: string
          x-go-name: OrgName
        tenantName:
          type: string
          x-go-name: TenantName
        userEmail:
          type: string
          x-go-name: UserEmail
        clusterName:
          type: string
          x-go-name: ClusterName
      type: object
      x-go-package: github.com/riptano/bellburnell/src/docs
    TenantLimitResponse:
      type: object
      properties:
        namespace_limit:
          type: integer
        topic_per_namespace_limit:
          type: integer
        usage:
          $ref: "#/components/schemas/NamespaceUsages"
    TenantToken:
      type: object
      properties:
        iat:
          type: integer
          x-go-name: Iat
        iss:
          type: string
          x-go-name: Iss
        sub:
          type: string
          x-go-name: Sub
        tokenid:
          type: string
          x-go-name: TokenID
    NamespaceUsages:
      type: array
      description: A list of namespace and its usage.
      items:
        $ref: "#/components/schemas/NamespaceUsage"
    NamespaceUsage:
      type: object
      description: A namespace and its usage
      properties:
        namespace:
          type: string
        topics:
          type: array
          items:
            type: string
    CloudProviderRegionResponse:
      description: CloudProviderRegionResponse is a map of cloud provider and its available regions.
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    tokenResponse:
      type: object
      properties:
        id:
          type: string
          x-go-name: ID
        subject:
          type: string
          x-go-name: Subject
        token:
          type: string
          x-go-name: Token
      description: NewTokenResponse is the json object for token server response
      x-go-name: NewTokenResponse
      x-go-package: github.com/riptano/bellburnell/src/route

  ## End Astra Streaming schemas

  responses:
    # 200
    Ok:
      description: The request completed successfully.

    # 201
    Created:
      description: The request completed successfully and created an object.

    # 202
    Accepted:
      description: The request was accepted.

    # 204
    NoContent:
      description: The request succeeded and no content is returned in response body.

    # 400
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"

    # 401
    Unauthorized:
      description: The user is unauthorized to perform the operation.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"

    # 403
    Forbidden:
      description: The user is forbidden to perform the operation.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"

    # 404
    NotFound:
      description: The specified database was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"

    # 409
    Conflict:
      description: The database is not in a valid state to perform the operation.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"

    # 422
    UnprocessableEntity:
      description: The structured data in the request could not be parsed.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"

    # 5XX
    ServerError:
      description: A server error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"

  securitySchemes:
    Bearer:
      description: A token must be passed in header to access the API.
      type: http
      scheme: bearer
