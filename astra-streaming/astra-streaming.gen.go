// Package astrastreaming provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package astrastreaming

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// CassandraCDCConfig is the response struct for C* CDC table tracking
type CassandraCDCConfig struct {
	CdcStatus       *string    `json:"cdcStatus,omitempty"`
	ClusterName     *string    `json:"clusterName,omitempty"`
	CodStatus       *string    `json:"codStatus,omitempty"`
	ConfigType      *string    `json:"configType,omitempty"`
	ConnectorName   *string    `json:"connectorName,omitempty"`
	ConnectorStatus *string    `json:"connectorStatus,omitempty"`
	Cpu             *int64     `json:"cpu,omitempty"`
	CreatedAt       *time.Time `json:"createdAt,omitempty"`
	DataTopic       *string    `json:"dataTopic,omitempty"`
	DatabaseId      *string    `json:"databaseId,omitempty"`
	DatabaseName    *string    `json:"databaseName,omitempty"`
	DatabaseTable   *string    `json:"databaseTable,omitempty"`
	EventTopic      *string    `json:"eventTopic,omitempty"`
	Instances       *int64     `json:"instances,omitempty"`
	Keyspace        *string    `json:"keyspace,omitempty"`
	Memory          *int64     `json:"memory,omitempty"`
	Namespace       *string    `json:"namespace,omitempty"`
	OrgId           *string    `json:"orgId,omitempty"`
	Tenant          *string    `json:"tenant,omitempty"`
	UpdatedAt       *time.Time `json:"updatedAt,omitempty"`
}

// ClusterResponse is the response struct for a cluster
type ClusterResponse struct {
	BrokerServiceUrl *string `json:"brokerServiceUrl,omitempty"`
	CloudProvider    *string `json:"cloudProvider,omitempty"`
	CloudRegion      *string `json:"cloudRegion,omitempty"`
	ClusterName      *string `json:"clusterName,omitempty"`
	ClusterType      *string `json:"clusterType,omitempty"`
	WebServiceUrl    *string `json:"webServiceUrl,omitempty"`
	WebsocketUrl     *string `json:"websocketUrl,omitempty"`
}

// LimitResponse is a response for tenant limits
type LimitResponse struct {
	NamespaceLimit         *int64                       `json:"namespace_limit,omitempty"`
	TopicPerNamespaceLimit *int64                       `json:"topic_per_namespace_limit,omitempty"`
	Usage                  *[]TenantNamespaceLimitUsage `json:"usage,omitempty"`
}

// TenantClusterPlanResponse is the tenant plan on a cluster
type TenantClusterPlanResponse struct {
	Email                  *string `json:"Email,omitempty"`
	AstraOrgGUID           *string `json:"astraOrgGUID,omitempty"`
	BrokerServiceUrl       *string `json:"brokerServiceUrl,omitempty"`
	CloudProvider          *string `json:"cloudProvider,omitempty"`
	CloudProviderCode      *string `json:"cloudProviderCode,omitempty"`
	CloudRegion            *string `json:"cloudRegion,omitempty"`
	ClusterName            *string `json:"clusterName,omitempty"`
	Id                     *string `json:"id,omitempty"`
	JvmVersion             *string `json:"jvmVersion,omitempty"`
	Plan                   *string `json:"plan,omitempty"`
	PlanCode               *string `json:"planCode,omitempty"`
	PulsarToken            *string `json:"pulsarToken,omitempty"`
	PulsarVersion          *string `json:"pulsarVersion,omitempty"`
	Status                 *string `json:"status,omitempty"`
	TenantName             *string `json:"tenantName,omitempty"`
	WebServiceUrl          *string `json:"webServiceUrl,omitempty"`
	WebsocketQueryParamUrl *string `json:"websocketQueryParamUrl,omitempty"`
	WebsocketUrl           *string `json:"websocketUrl,omitempty"`
}

// TenantNamespaceLimitUsage holds usages for enforcing limits
type TenantNamespaceLimitUsage struct {
	Namespace *string   `json:"namespace,omitempty"`
	Topics    *[]string `json:"topics,omitempty"`
}

// Usage is the data usage per single tenant
type Usage struct {
	BacklogStorageByteSize *float64   `json:"backlogStorageByteSize,omitempty"`
	ConsumerCount          *float64   `json:"consumerCount,omitempty"`
	MsgBacklogNumber       *float64   `json:"msgBacklogNumber,omitempty"`
	MsgRateIn              *float64   `json:"msgRateIn,omitempty"`
	MsgRateOut             *float64   `json:"msgRateOut,omitempty"`
	Name                   *string    `json:"name,omitempty"`
	ProducerCount          *float64   `json:"producerCount,omitempty"`
	StorageSize            *float64   `json:"storageSize,omitempty"`
	SubscriptionCount      *float64   `json:"subscriptionCount,omitempty"`
	SubscriptionDelayed    *float64   `json:"subscriptionDelayed,omitempty"`
	ThroughputIn           *float64   `json:"throughputIn,omitempty"`
	ThroughputOut          *float64   `json:"throughputOut,omitempty"`
	TotalBytesIn           *float64   `json:"totalBytesIn,omitempty"`
	TotalBytesOut          *float64   `json:"totalBytesOut,omitempty"`
	TotalMessagesIn        *float64   `json:"totalMessagesIn,omitempty"`
	TotalMessagesOut       *float64   `json:"totalMessagesOut,omitempty"`
	UpdatedAt              *time.Time `json:"updatedAt,omitempty"`
}

// CdcTableConfigResponse defines model for cdcTableConfigResponse.
type CdcTableConfigResponse struct {
	Body *[]CassandraCDCConfig `json:"Body,omitempty"`
}

// CreatedTenantResponse defines model for createdTenantResponse.
type CreatedTenantResponse struct {
	// TenantClusterPlanResponse is the tenant plan on a cluster
	Body *TenantClusterPlanResponse `json:"Body,omitempty"`
}

// ErrorResponse defines model for errorResponse.
type ErrorResponse struct {
	Reason *string `json:"reason,omitempty"`
}

// ListOfMaps defines model for listOfMaps.
type ListOfMaps []struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ProviderRegionsResponse defines model for providerRegionsResponse.
type ProviderRegionsResponse struct {
	Body *ProviderRegionsResponse_Body `json:"Body,omitempty"`
}

// ProviderRegionsResponse_Body defines model for ProviderRegionsResponse.Body.
type ProviderRegionsResponse_Body struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// PulsarClustersResponse defines model for pulsarClustersResponse.
type PulsarClustersResponse struct {
	Body *[]ClusterResponse `json:"Body,omitempty"`
}

// ServerlessRegionsResponse defines model for serverlessRegionsResponse.
type ServerlessRegionsResponse struct {
	Body *ServerlessRegionsResponse_Body `json:"Body,omitempty"`
}

// ServerlessRegionsResponse_Body defines model for ServerlessRegionsResponse.Body.
type ServerlessRegionsResponse_Body struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StatsResponse defines model for statsResponse.
type StatsResponse struct {
	Body *StatsResponse_Body `json:"Body,omitempty"`
}

// StatsResponse_Body defines model for StatsResponse.Body.
type StatsResponse_Body struct {
	AdditionalProperties map[string]Usage `json:"-"`
}

// TenantClusterPlansResponse defines model for tenantClusterPlansResponse.
type TenantClusterPlansResponse struct {
	Body *[]TenantClusterPlanResponse `json:"Body,omitempty"`
}

// TenantLimitResponse defines model for tenantLimitResponse.
type TenantLimitResponse struct {
	// LimitResponse is a response for tenant limits
	Body *LimitResponse `json:"Body,omitempty"`
}

// TenantRequest defines model for tenantRequest.
type TenantRequest struct {
	CloudProvider *string `json:"cloudProvider,omitempty"`
	CloudRegion   *string `json:"cloudRegion,omitempty"`
	OrgID         *string `json:"orgID,omitempty"`
	OrgName       *string `json:"orgName,omitempty"`
	TenantName    *string `json:"tenantName,omitempty"`
	UserEmail     *string `json:"userEmail,omitempty"`
}

// IdOfCreateTenantEndpointParams defines parameters for IdOfCreateTenantEndpoint.
type IdOfCreateTenantEndpointParams struct {
	// A topic name for auto-creation (if not specified, no topic is created)
	Topic *string `json:"topic,omitempty"`
}

// HeadV2StreamingTenantsTenantNameParams defines parameters for HeadV2StreamingTenantsTenantName.
type HeadV2StreamingTenantsTenantNameParams struct {
	// Cloud provider, for example, aws, gcp, azure; this is required to evaluate whether a tenant has been reserved by its org owner
	Provider *string `json:"provider,omitempty"`

	// Cloud provider region, for example, us-east1, us-west1; this is required to evaluate whether a tenant has been reserved by its org owner
	Region *string `json:"region,omitempty"`

	// Bearer Astra Keycloak token or AstraCS token.
	Authorization string `json:"Authorization"`

	// the Astra Org ID
	XDataStaxCurrentOrg string `json:"X-DataStax-Current-Org"`
}

// IdListTenantTokensParams defines parameters for IdListTenantTokens.
type IdListTenantTokensParams struct {
	// Bearer Astra Keycloak token or AstraCS token.
	Authorization string `json:"Authorization"`

	// Astra Org ID.
	XDataStaxCurrentOrg string `json:"X-DataStax-Current-Org"`

	// Astra Streaming Cluster Name.
	XDataStaxPulsarCluster string `json:"X-DataStax-Pulsar-Cluster"`
}

// IdCreateTenantTokenParams defines parameters for IdCreateTenantToken.
type IdCreateTenantTokenParams struct {
	// Bearer Astra Keycloak token or AstraCS token.
	Authorization string `json:"Authorization"`

	// Astra Org ID.
	XDataStaxCurrentOrg string `json:"X-DataStax-Current-Org"`

	// Astra Streaming Cluster Name.
	XDataStaxPulsarCluster string `json:"X-DataStax-Pulsar-Cluster"`
}

// IdDeleteTenantTokenParams defines parameters for IdDeleteTenantToken.
type IdDeleteTenantTokenParams struct {
	// Bearer Astra Keycloak token or AstraCS token.
	Authorization string `json:"Authorization"`

	// Astra Org ID.
	XDataStaxCurrentOrg string `json:"X-DataStax-Current-Org"`

	// Astra Streaming Cluster Name.
	XDataStaxPulsarCluster string `json:"X-DataStax-Pulsar-Cluster"`
}

// GetV2StreamingTenantsTenantNameTokensTokenIDParams defines parameters for GetV2StreamingTenantsTenantNameTokensTokenID.
type GetV2StreamingTenantsTenantNameTokensTokenIDParams struct {
	// Bearer Astra Keycloak token or AstraCS token.
	Authorization string `json:"Authorization"`

	// Astra Org ID.
	XDataStaxCurrentOrg string `json:"X-DataStax-Current-Org"`

	// Astra Streaming Cluster Name.
	XDataStaxPulsarCluster string `json:"X-DataStax-Pulsar-Cluster"`
}

// DeleteV2StreamingTenantsTenantClustersClusterParams defines parameters for DeleteV2StreamingTenantsTenantClustersCluster.
type DeleteV2StreamingTenantsTenantClustersClusterParams struct {
	// Performs a soft delete that only marks the tenant as deleted in the database (opt=soft)
	Opt *string `json:"opt,omitempty"`
}

// Getter for additional properties for ProviderRegionsResponse_Body. Returns the specified
// element and whether it was found
func (a ProviderRegionsResponse_Body) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProviderRegionsResponse_Body
func (a *ProviderRegionsResponse_Body) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProviderRegionsResponse_Body to handle AdditionalProperties
func (a *ProviderRegionsResponse_Body) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProviderRegionsResponse_Body to handle AdditionalProperties
func (a ProviderRegionsResponse_Body) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServerlessRegionsResponse_Body. Returns the specified
// element and whether it was found
func (a ServerlessRegionsResponse_Body) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServerlessRegionsResponse_Body
func (a *ServerlessRegionsResponse_Body) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServerlessRegionsResponse_Body to handle AdditionalProperties
func (a *ServerlessRegionsResponse_Body) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServerlessRegionsResponse_Body to handle AdditionalProperties
func (a ServerlessRegionsResponse_Body) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StatsResponse_Body. Returns the specified
// element and whether it was found
func (a StatsResponse_Body) Get(fieldName string) (value Usage, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StatsResponse_Body
func (a *StatsResponse_Body) Set(fieldName string, value Usage) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Usage)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StatsResponse_Body to handle AdditionalProperties
func (a *StatsResponse_Body) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Usage)
		for fieldName, fieldBuf := range object {
			var fieldVal Usage
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StatsResponse_Body to handle AdditionalProperties
func (a StatsResponse_Body) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// IdNamespaceStatsTenant request
	IdNamespaceStatsTenant(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdNamespaceStatsTenantNamespace request
	IdNamespaceStatsTenantNamespace(ctx context.Context, tenant string, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdTopicStatsTenant request
	IdTopicStatsTenant(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdTopicStatsTenantNamespace request
	IdTopicStatsTenantNamespace(ctx context.Context, tenant string, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdOfTenant request
	IdOfTenant(ctx context.Context, databaseId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StreamingClusters request
	GetV2StreamingClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdTenant request
	IdTenant(ctx context.Context, org string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StreamingOrgsOrgTenantsTenant request
	GetV2StreamingOrgsOrgTenantsTenant(ctx context.Context, org string, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StreamingProviders request
	GetV2StreamingProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StreamingServerlessRegions request
	GetV2StreamingServerlessRegions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StreamingTenants request
	GetV2StreamingTenants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdOfCreateTenantEndpoint request with any body
	IdOfCreateTenantEndpointWithBody(ctx context.Context, params *IdOfCreateTenantEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadV2StreamingTenantsTenantName request
	HeadV2StreamingTenantsTenantName(ctx context.Context, tenantName string, params *HeadV2StreamingTenantsTenantNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdListTenantTokens request
	IdListTenantTokens(ctx context.Context, tenantName string, params *IdListTenantTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdCreateTenantToken request
	IdCreateTenantToken(ctx context.Context, tenantName string, params *IdCreateTenantTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdDeleteTenantToken request
	IdDeleteTenantToken(ctx context.Context, tenantName string, tokenID string, params *IdDeleteTenantTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StreamingTenantsTenantNameTokensTokenID request
	GetV2StreamingTenantsTenantNameTokensTokenID(ctx context.Context, tenantName string, tokenID string, params *GetV2StreamingTenantsTenantNameTokensTokenIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2StreamingTenantsTenantClustersCluster request
	DeleteV2StreamingTenantsTenantClustersCluster(ctx context.Context, tenant string, cluster string, params *DeleteV2StreamingTenantsTenantClustersClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2StreamingTenantsTenantLimits request
	GetV2StreamingTenantsTenantLimits(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) IdNamespaceStatsTenant(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdNamespaceStatsTenantRequest(c.Server, tenant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdNamespaceStatsTenantNamespace(ctx context.Context, tenant string, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdNamespaceStatsTenantNamespaceRequest(c.Server, tenant, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdTopicStatsTenant(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdTopicStatsTenantRequest(c.Server, tenant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdTopicStatsTenantNamespace(ctx context.Context, tenant string, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdTopicStatsTenantNamespaceRequest(c.Server, tenant, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdOfTenant(ctx context.Context, databaseId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdOfTenantRequest(c.Server, databaseId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StreamingClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StreamingClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdTenant(ctx context.Context, org string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdTenantRequest(c.Server, org)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StreamingOrgsOrgTenantsTenant(ctx context.Context, org string, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StreamingOrgsOrgTenantsTenantRequest(c.Server, org, tenant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StreamingProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StreamingProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StreamingServerlessRegions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StreamingServerlessRegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StreamingTenants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StreamingTenantsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdOfCreateTenantEndpointWithBody(ctx context.Context, params *IdOfCreateTenantEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdOfCreateTenantEndpointRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadV2StreamingTenantsTenantName(ctx context.Context, tenantName string, params *HeadV2StreamingTenantsTenantNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadV2StreamingTenantsTenantNameRequest(c.Server, tenantName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdListTenantTokens(ctx context.Context, tenantName string, params *IdListTenantTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdListTenantTokensRequest(c.Server, tenantName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdCreateTenantToken(ctx context.Context, tenantName string, params *IdCreateTenantTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdCreateTenantTokenRequest(c.Server, tenantName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdDeleteTenantToken(ctx context.Context, tenantName string, tokenID string, params *IdDeleteTenantTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdDeleteTenantTokenRequest(c.Server, tenantName, tokenID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StreamingTenantsTenantNameTokensTokenID(ctx context.Context, tenantName string, tokenID string, params *GetV2StreamingTenantsTenantNameTokensTokenIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StreamingTenantsTenantNameTokensTokenIDRequest(c.Server, tenantName, tokenID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2StreamingTenantsTenantClustersCluster(ctx context.Context, tenant string, cluster string, params *DeleteV2StreamingTenantsTenantClustersClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2StreamingTenantsTenantClustersClusterRequest(c.Server, tenant, cluster, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2StreamingTenantsTenantLimits(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2StreamingTenantsTenantLimitsRequest(c.Server, tenant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewIdNamespaceStatsTenantRequest generates requests for IdNamespaceStatsTenant
func NewIdNamespaceStatsTenantRequest(server string, tenant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v2/stats/namespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdNamespaceStatsTenantNamespaceRequest generates requests for IdNamespaceStatsTenantNamespace
func NewIdNamespaceStatsTenantNamespaceRequest(server string, tenant string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v2/stats/namespaces/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdTopicStatsTenantRequest generates requests for IdTopicStatsTenant
func NewIdTopicStatsTenantRequest(server string, tenant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v2/stats/topics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdTopicStatsTenantNamespaceRequest generates requests for IdTopicStatsTenantNamespace
func NewIdTopicStatsTenantNamespaceRequest(server string, tenant string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v2/stats/topics/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdOfTenantRequest generates requests for IdOfTenant
func NewIdOfTenantRequest(server string, databaseId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseId", runtime.ParamLocationPath, databaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/astra-cdc/databases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2StreamingClustersRequest generates requests for GetV2StreamingClusters
func NewGetV2StreamingClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdTenantRequest generates requests for IdTenant
func NewIdTenantRequest(server string, org string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/orgs/%s/tenants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2StreamingOrgsOrgTenantsTenantRequest generates requests for GetV2StreamingOrgsOrgTenantsTenant
func NewGetV2StreamingOrgsOrgTenantsTenantRequest(server string, org string, tenant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/orgs/%s/tenants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2StreamingProvidersRequest generates requests for GetV2StreamingProviders
func NewGetV2StreamingProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2StreamingServerlessRegionsRequest generates requests for GetV2StreamingServerlessRegions
func NewGetV2StreamingServerlessRegionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/serverless-regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2StreamingTenantsRequest generates requests for GetV2StreamingTenants
func NewGetV2StreamingTenantsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdOfCreateTenantEndpointRequestWithBody generates requests for IdOfCreateTenantEndpoint with any type of body
func NewIdOfCreateTenantEndpointRequestWithBody(server string, params *IdOfCreateTenantEndpointParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Topic != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topic", runtime.ParamLocationQuery, *params.Topic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHeadV2StreamingTenantsTenantNameRequest generates requests for HeadV2StreamingTenantsTenantName
func NewHeadV2StreamingTenantsTenantNameRequest(server string, tenantName string, params *HeadV2StreamingTenantsTenantNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Current-Org", runtime.ParamLocationHeader, params.XDataStaxCurrentOrg)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Current-Org", headerParam1)

	return req, nil
}

// NewIdListTenantTokensRequest generates requests for IdListTenantTokens
func NewIdListTenantTokensRequest(server string, tenantName string, params *IdListTenantTokensParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Current-Org", runtime.ParamLocationHeader, params.XDataStaxCurrentOrg)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Current-Org", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Pulsar-Cluster", runtime.ParamLocationHeader, params.XDataStaxPulsarCluster)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Pulsar-Cluster", headerParam2)

	return req, nil
}

// NewIdCreateTenantTokenRequest generates requests for IdCreateTenantToken
func NewIdCreateTenantTokenRequest(server string, tenantName string, params *IdCreateTenantTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Current-Org", runtime.ParamLocationHeader, params.XDataStaxCurrentOrg)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Current-Org", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Pulsar-Cluster", runtime.ParamLocationHeader, params.XDataStaxPulsarCluster)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Pulsar-Cluster", headerParam2)

	return req, nil
}

// NewIdDeleteTenantTokenRequest generates requests for IdDeleteTenantToken
func NewIdDeleteTenantTokenRequest(server string, tenantName string, tokenID string, params *IdDeleteTenantTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenID", runtime.ParamLocationPath, tokenID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Current-Org", runtime.ParamLocationHeader, params.XDataStaxCurrentOrg)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Current-Org", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Pulsar-Cluster", runtime.ParamLocationHeader, params.XDataStaxPulsarCluster)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Pulsar-Cluster", headerParam2)

	return req, nil
}

// NewGetV2StreamingTenantsTenantNameTokensTokenIDRequest generates requests for GetV2StreamingTenantsTenantNameTokensTokenID
func NewGetV2StreamingTenantsTenantNameTokensTokenIDRequest(server string, tenantName string, tokenID string, params *GetV2StreamingTenantsTenantNameTokensTokenIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenID", runtime.ParamLocationPath, tokenID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Current-Org", runtime.ParamLocationHeader, params.XDataStaxCurrentOrg)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Current-Org", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-DataStax-Pulsar-Cluster", runtime.ParamLocationHeader, params.XDataStaxPulsarCluster)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-DataStax-Pulsar-Cluster", headerParam2)

	return req, nil
}

// NewDeleteV2StreamingTenantsTenantClustersClusterRequest generates requests for DeleteV2StreamingTenantsTenantClustersCluster
func NewDeleteV2StreamingTenantsTenantClustersClusterRequest(server string, tenant string, cluster string, params *DeleteV2StreamingTenantsTenantClustersClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster", runtime.ParamLocationPath, cluster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Opt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opt", runtime.ParamLocationQuery, *params.Opt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2StreamingTenantsTenantLimitsRequest generates requests for GetV2StreamingTenantsTenantLimits
func NewGetV2StreamingTenantsTenantLimitsRequest(server string, tenant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/streaming/tenants/%s/limits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// IdNamespaceStatsTenant request
	IdNamespaceStatsTenantWithResponse(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*IdNamespaceStatsTenantResponse, error)

	// IdNamespaceStatsTenantNamespace request
	IdNamespaceStatsTenantNamespaceWithResponse(ctx context.Context, tenant string, namespace string, reqEditors ...RequestEditorFn) (*IdNamespaceStatsTenantNamespaceResponse, error)

	// IdTopicStatsTenant request
	IdTopicStatsTenantWithResponse(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*IdTopicStatsTenantResponse, error)

	// IdTopicStatsTenantNamespace request
	IdTopicStatsTenantNamespaceWithResponse(ctx context.Context, tenant string, namespace string, reqEditors ...RequestEditorFn) (*IdTopicStatsTenantNamespaceResponse, error)

	// IdOfTenant request
	IdOfTenantWithResponse(ctx context.Context, databaseId string, reqEditors ...RequestEditorFn) (*IdOfTenantResponse, error)

	// GetV2StreamingClusters request
	GetV2StreamingClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2StreamingClustersResponse, error)

	// IdTenant request
	IdTenantWithResponse(ctx context.Context, org string, reqEditors ...RequestEditorFn) (*IdTenantResponse, error)

	// GetV2StreamingOrgsOrgTenantsTenant request
	GetV2StreamingOrgsOrgTenantsTenantWithResponse(ctx context.Context, org string, tenant string, reqEditors ...RequestEditorFn) (*GetV2StreamingOrgsOrgTenantsTenantResponse, error)

	// GetV2StreamingProviders request
	GetV2StreamingProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2StreamingProvidersResponse, error)

	// GetV2StreamingServerlessRegions request
	GetV2StreamingServerlessRegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2StreamingServerlessRegionsResponse, error)

	// GetV2StreamingTenants request
	GetV2StreamingTenantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2StreamingTenantsResponse, error)

	// IdOfCreateTenantEndpoint request with any body
	IdOfCreateTenantEndpointWithBodyWithResponse(ctx context.Context, params *IdOfCreateTenantEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdOfCreateTenantEndpointResponse, error)

	// HeadV2StreamingTenantsTenantName request
	HeadV2StreamingTenantsTenantNameWithResponse(ctx context.Context, tenantName string, params *HeadV2StreamingTenantsTenantNameParams, reqEditors ...RequestEditorFn) (*HeadV2StreamingTenantsTenantNameResponse, error)

	// IdListTenantTokens request
	IdListTenantTokensWithResponse(ctx context.Context, tenantName string, params *IdListTenantTokensParams, reqEditors ...RequestEditorFn) (*IdListTenantTokensResponse, error)

	// IdCreateTenantToken request
	IdCreateTenantTokenWithResponse(ctx context.Context, tenantName string, params *IdCreateTenantTokenParams, reqEditors ...RequestEditorFn) (*IdCreateTenantTokenResponse, error)

	// IdDeleteTenantToken request
	IdDeleteTenantTokenWithResponse(ctx context.Context, tenantName string, tokenID string, params *IdDeleteTenantTokenParams, reqEditors ...RequestEditorFn) (*IdDeleteTenantTokenResponse, error)

	// GetV2StreamingTenantsTenantNameTokensTokenID request
	GetV2StreamingTenantsTenantNameTokensTokenIDWithResponse(ctx context.Context, tenantName string, tokenID string, params *GetV2StreamingTenantsTenantNameTokensTokenIDParams, reqEditors ...RequestEditorFn) (*GetV2StreamingTenantsTenantNameTokensTokenIDResponse, error)

	// DeleteV2StreamingTenantsTenantClustersCluster request
	DeleteV2StreamingTenantsTenantClustersClusterWithResponse(ctx context.Context, tenant string, cluster string, params *DeleteV2StreamingTenantsTenantClustersClusterParams, reqEditors ...RequestEditorFn) (*DeleteV2StreamingTenantsTenantClustersClusterResponse, error)

	// GetV2StreamingTenantsTenantLimits request
	GetV2StreamingTenantsTenantLimitsWithResponse(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*GetV2StreamingTenantsTenantLimitsResponse, error)
}

type IdNamespaceStatsTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdNamespaceStatsTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdNamespaceStatsTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdNamespaceStatsTenantNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdNamespaceStatsTenantNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdNamespaceStatsTenantNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdTopicStatsTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdTopicStatsTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdTopicStatsTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdTopicStatsTenantNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdTopicStatsTenantNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdTopicStatsTenantNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdOfTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdOfTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdOfTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StreamingClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2StreamingClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StreamingClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StreamingOrgsOrgTenantsTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2StreamingOrgsOrgTenantsTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StreamingOrgsOrgTenantsTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StreamingProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2StreamingProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StreamingProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StreamingServerlessRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2StreamingServerlessRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StreamingServerlessRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StreamingTenantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2StreamingTenantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StreamingTenantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdOfCreateTenantEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdOfCreateTenantEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdOfCreateTenantEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadV2StreamingTenantsTenantNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadV2StreamingTenantsTenantNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadV2StreamingTenantsTenantNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdListTenantTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdListTenantTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdListTenantTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdCreateTenantTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdCreateTenantTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdCreateTenantTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdDeleteTenantTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdDeleteTenantTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdDeleteTenantTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StreamingTenantsTenantNameTokensTokenIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2StreamingTenantsTenantNameTokensTokenIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StreamingTenantsTenantNameTokensTokenIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2StreamingTenantsTenantClustersClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV2StreamingTenantsTenantClustersClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2StreamingTenantsTenantClustersClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2StreamingTenantsTenantLimitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2StreamingTenantsTenantLimitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2StreamingTenantsTenantLimitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// IdNamespaceStatsTenantWithResponse request returning *IdNamespaceStatsTenantResponse
func (c *ClientWithResponses) IdNamespaceStatsTenantWithResponse(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*IdNamespaceStatsTenantResponse, error) {
	rsp, err := c.IdNamespaceStatsTenant(ctx, tenant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdNamespaceStatsTenantResponse(rsp)
}

// IdNamespaceStatsTenantNamespaceWithResponse request returning *IdNamespaceStatsTenantNamespaceResponse
func (c *ClientWithResponses) IdNamespaceStatsTenantNamespaceWithResponse(ctx context.Context, tenant string, namespace string, reqEditors ...RequestEditorFn) (*IdNamespaceStatsTenantNamespaceResponse, error) {
	rsp, err := c.IdNamespaceStatsTenantNamespace(ctx, tenant, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdNamespaceStatsTenantNamespaceResponse(rsp)
}

// IdTopicStatsTenantWithResponse request returning *IdTopicStatsTenantResponse
func (c *ClientWithResponses) IdTopicStatsTenantWithResponse(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*IdTopicStatsTenantResponse, error) {
	rsp, err := c.IdTopicStatsTenant(ctx, tenant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdTopicStatsTenantResponse(rsp)
}

// IdTopicStatsTenantNamespaceWithResponse request returning *IdTopicStatsTenantNamespaceResponse
func (c *ClientWithResponses) IdTopicStatsTenantNamespaceWithResponse(ctx context.Context, tenant string, namespace string, reqEditors ...RequestEditorFn) (*IdTopicStatsTenantNamespaceResponse, error) {
	rsp, err := c.IdTopicStatsTenantNamespace(ctx, tenant, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdTopicStatsTenantNamespaceResponse(rsp)
}

// IdOfTenantWithResponse request returning *IdOfTenantResponse
func (c *ClientWithResponses) IdOfTenantWithResponse(ctx context.Context, databaseId string, reqEditors ...RequestEditorFn) (*IdOfTenantResponse, error) {
	rsp, err := c.IdOfTenant(ctx, databaseId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdOfTenantResponse(rsp)
}

// GetV2StreamingClustersWithResponse request returning *GetV2StreamingClustersResponse
func (c *ClientWithResponses) GetV2StreamingClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2StreamingClustersResponse, error) {
	rsp, err := c.GetV2StreamingClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StreamingClustersResponse(rsp)
}

// IdTenantWithResponse request returning *IdTenantResponse
func (c *ClientWithResponses) IdTenantWithResponse(ctx context.Context, org string, reqEditors ...RequestEditorFn) (*IdTenantResponse, error) {
	rsp, err := c.IdTenant(ctx, org, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdTenantResponse(rsp)
}

// GetV2StreamingOrgsOrgTenantsTenantWithResponse request returning *GetV2StreamingOrgsOrgTenantsTenantResponse
func (c *ClientWithResponses) GetV2StreamingOrgsOrgTenantsTenantWithResponse(ctx context.Context, org string, tenant string, reqEditors ...RequestEditorFn) (*GetV2StreamingOrgsOrgTenantsTenantResponse, error) {
	rsp, err := c.GetV2StreamingOrgsOrgTenantsTenant(ctx, org, tenant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StreamingOrgsOrgTenantsTenantResponse(rsp)
}

// GetV2StreamingProvidersWithResponse request returning *GetV2StreamingProvidersResponse
func (c *ClientWithResponses) GetV2StreamingProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2StreamingProvidersResponse, error) {
	rsp, err := c.GetV2StreamingProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StreamingProvidersResponse(rsp)
}

// GetV2StreamingServerlessRegionsWithResponse request returning *GetV2StreamingServerlessRegionsResponse
func (c *ClientWithResponses) GetV2StreamingServerlessRegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2StreamingServerlessRegionsResponse, error) {
	rsp, err := c.GetV2StreamingServerlessRegions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StreamingServerlessRegionsResponse(rsp)
}

// GetV2StreamingTenantsWithResponse request returning *GetV2StreamingTenantsResponse
func (c *ClientWithResponses) GetV2StreamingTenantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2StreamingTenantsResponse, error) {
	rsp, err := c.GetV2StreamingTenants(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StreamingTenantsResponse(rsp)
}

// IdOfCreateTenantEndpointWithBodyWithResponse request with arbitrary body returning *IdOfCreateTenantEndpointResponse
func (c *ClientWithResponses) IdOfCreateTenantEndpointWithBodyWithResponse(ctx context.Context, params *IdOfCreateTenantEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdOfCreateTenantEndpointResponse, error) {
	rsp, err := c.IdOfCreateTenantEndpointWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdOfCreateTenantEndpointResponse(rsp)
}

// HeadV2StreamingTenantsTenantNameWithResponse request returning *HeadV2StreamingTenantsTenantNameResponse
func (c *ClientWithResponses) HeadV2StreamingTenantsTenantNameWithResponse(ctx context.Context, tenantName string, params *HeadV2StreamingTenantsTenantNameParams, reqEditors ...RequestEditorFn) (*HeadV2StreamingTenantsTenantNameResponse, error) {
	rsp, err := c.HeadV2StreamingTenantsTenantName(ctx, tenantName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadV2StreamingTenantsTenantNameResponse(rsp)
}

// IdListTenantTokensWithResponse request returning *IdListTenantTokensResponse
func (c *ClientWithResponses) IdListTenantTokensWithResponse(ctx context.Context, tenantName string, params *IdListTenantTokensParams, reqEditors ...RequestEditorFn) (*IdListTenantTokensResponse, error) {
	rsp, err := c.IdListTenantTokens(ctx, tenantName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdListTenantTokensResponse(rsp)
}

// IdCreateTenantTokenWithResponse request returning *IdCreateTenantTokenResponse
func (c *ClientWithResponses) IdCreateTenantTokenWithResponse(ctx context.Context, tenantName string, params *IdCreateTenantTokenParams, reqEditors ...RequestEditorFn) (*IdCreateTenantTokenResponse, error) {
	rsp, err := c.IdCreateTenantToken(ctx, tenantName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdCreateTenantTokenResponse(rsp)
}

// IdDeleteTenantTokenWithResponse request returning *IdDeleteTenantTokenResponse
func (c *ClientWithResponses) IdDeleteTenantTokenWithResponse(ctx context.Context, tenantName string, tokenID string, params *IdDeleteTenantTokenParams, reqEditors ...RequestEditorFn) (*IdDeleteTenantTokenResponse, error) {
	rsp, err := c.IdDeleteTenantToken(ctx, tenantName, tokenID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdDeleteTenantTokenResponse(rsp)
}

// GetV2StreamingTenantsTenantNameTokensTokenIDWithResponse request returning *GetV2StreamingTenantsTenantNameTokensTokenIDResponse
func (c *ClientWithResponses) GetV2StreamingTenantsTenantNameTokensTokenIDWithResponse(ctx context.Context, tenantName string, tokenID string, params *GetV2StreamingTenantsTenantNameTokensTokenIDParams, reqEditors ...RequestEditorFn) (*GetV2StreamingTenantsTenantNameTokensTokenIDResponse, error) {
	rsp, err := c.GetV2StreamingTenantsTenantNameTokensTokenID(ctx, tenantName, tokenID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StreamingTenantsTenantNameTokensTokenIDResponse(rsp)
}

// DeleteV2StreamingTenantsTenantClustersClusterWithResponse request returning *DeleteV2StreamingTenantsTenantClustersClusterResponse
func (c *ClientWithResponses) DeleteV2StreamingTenantsTenantClustersClusterWithResponse(ctx context.Context, tenant string, cluster string, params *DeleteV2StreamingTenantsTenantClustersClusterParams, reqEditors ...RequestEditorFn) (*DeleteV2StreamingTenantsTenantClustersClusterResponse, error) {
	rsp, err := c.DeleteV2StreamingTenantsTenantClustersCluster(ctx, tenant, cluster, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2StreamingTenantsTenantClustersClusterResponse(rsp)
}

// GetV2StreamingTenantsTenantLimitsWithResponse request returning *GetV2StreamingTenantsTenantLimitsResponse
func (c *ClientWithResponses) GetV2StreamingTenantsTenantLimitsWithResponse(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*GetV2StreamingTenantsTenantLimitsResponse, error) {
	rsp, err := c.GetV2StreamingTenantsTenantLimits(ctx, tenant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2StreamingTenantsTenantLimitsResponse(rsp)
}

// ParseIdNamespaceStatsTenantResponse parses an HTTP response from a IdNamespaceStatsTenantWithResponse call
func ParseIdNamespaceStatsTenantResponse(rsp *http.Response) (*IdNamespaceStatsTenantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdNamespaceStatsTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdNamespaceStatsTenantNamespaceResponse parses an HTTP response from a IdNamespaceStatsTenantNamespaceWithResponse call
func ParseIdNamespaceStatsTenantNamespaceResponse(rsp *http.Response) (*IdNamespaceStatsTenantNamespaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdNamespaceStatsTenantNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdTopicStatsTenantResponse parses an HTTP response from a IdTopicStatsTenantWithResponse call
func ParseIdTopicStatsTenantResponse(rsp *http.Response) (*IdTopicStatsTenantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdTopicStatsTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdTopicStatsTenantNamespaceResponse parses an HTTP response from a IdTopicStatsTenantNamespaceWithResponse call
func ParseIdTopicStatsTenantNamespaceResponse(rsp *http.Response) (*IdTopicStatsTenantNamespaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdTopicStatsTenantNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdOfTenantResponse parses an HTTP response from a IdOfTenantWithResponse call
func ParseIdOfTenantResponse(rsp *http.Response) (*IdOfTenantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdOfTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2StreamingClustersResponse parses an HTTP response from a GetV2StreamingClustersWithResponse call
func ParseGetV2StreamingClustersResponse(rsp *http.Response) (*GetV2StreamingClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StreamingClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdTenantResponse parses an HTTP response from a IdTenantWithResponse call
func ParseIdTenantResponse(rsp *http.Response) (*IdTenantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2StreamingOrgsOrgTenantsTenantResponse parses an HTTP response from a GetV2StreamingOrgsOrgTenantsTenantWithResponse call
func ParseGetV2StreamingOrgsOrgTenantsTenantResponse(rsp *http.Response) (*GetV2StreamingOrgsOrgTenantsTenantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StreamingOrgsOrgTenantsTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2StreamingProvidersResponse parses an HTTP response from a GetV2StreamingProvidersWithResponse call
func ParseGetV2StreamingProvidersResponse(rsp *http.Response) (*GetV2StreamingProvidersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StreamingProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2StreamingServerlessRegionsResponse parses an HTTP response from a GetV2StreamingServerlessRegionsWithResponse call
func ParseGetV2StreamingServerlessRegionsResponse(rsp *http.Response) (*GetV2StreamingServerlessRegionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StreamingServerlessRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2StreamingTenantsResponse parses an HTTP response from a GetV2StreamingTenantsWithResponse call
func ParseGetV2StreamingTenantsResponse(rsp *http.Response) (*GetV2StreamingTenantsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StreamingTenantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdOfCreateTenantEndpointResponse parses an HTTP response from a IdOfCreateTenantEndpointWithResponse call
func ParseIdOfCreateTenantEndpointResponse(rsp *http.Response) (*IdOfCreateTenantEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdOfCreateTenantEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeadV2StreamingTenantsTenantNameResponse parses an HTTP response from a HeadV2StreamingTenantsTenantNameWithResponse call
func ParseHeadV2StreamingTenantsTenantNameResponse(rsp *http.Response) (*HeadV2StreamingTenantsTenantNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadV2StreamingTenantsTenantNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdListTenantTokensResponse parses an HTTP response from a IdListTenantTokensWithResponse call
func ParseIdListTenantTokensResponse(rsp *http.Response) (*IdListTenantTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdListTenantTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdCreateTenantTokenResponse parses an HTTP response from a IdCreateTenantTokenWithResponse call
func ParseIdCreateTenantTokenResponse(rsp *http.Response) (*IdCreateTenantTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdCreateTenantTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdDeleteTenantTokenResponse parses an HTTP response from a IdDeleteTenantTokenWithResponse call
func ParseIdDeleteTenantTokenResponse(rsp *http.Response) (*IdDeleteTenantTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdDeleteTenantTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2StreamingTenantsTenantNameTokensTokenIDResponse parses an HTTP response from a GetV2StreamingTenantsTenantNameTokensTokenIDWithResponse call
func ParseGetV2StreamingTenantsTenantNameTokensTokenIDResponse(rsp *http.Response) (*GetV2StreamingTenantsTenantNameTokensTokenIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StreamingTenantsTenantNameTokensTokenIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV2StreamingTenantsTenantClustersClusterResponse parses an HTTP response from a DeleteV2StreamingTenantsTenantClustersClusterWithResponse call
func ParseDeleteV2StreamingTenantsTenantClustersClusterResponse(rsp *http.Response) (*DeleteV2StreamingTenantsTenantClustersClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2StreamingTenantsTenantClustersClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2StreamingTenantsTenantLimitsResponse parses an HTTP response from a GetV2StreamingTenantsTenantLimitsWithResponse call
func ParseGetV2StreamingTenantsTenantLimitsResponse(rsp *http.Response) (*GetV2StreamingTenantsTenantLimitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2StreamingTenantsTenantLimitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
